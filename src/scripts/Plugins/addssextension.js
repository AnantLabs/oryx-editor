/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if(!ORYX.Plugins)	ORYX.Plugins = new Object();//TODO this one fails when importing a stencilset that is already loaded. Hoewver, since an asynchronous callback throws the error, the user doesn#t recognize it.ORYX.Plugins.SSExtensionLoader = {	/**	 *	Constructor	 *	@param {Object} Facade: The Facade of the Editor	 */	construct: function(facade) {		this.facade = facade;		this.facade.offer({			'name':"Add Stencil Set Extension",			'functionality': this.addSSExtension.bind(this),			'group': "StencilSet",			'icon': ORYX.PATH + "images/add.png",			'description': "Add a stencil set extension by url.",			'index': 1,			'minShape': 0,			'maxShape': 0});	},		addSSExtension: function() {		var url = Ext.Msg.prompt("Oryx", "Enter relative url of the stencil set extension's JSON file:", (function(btn, url) {			if(btn == 'ok' && url) {				this.facade.raiseEvent({type:'loading.enable', text:"Loading Stencil Set Extension"});								new Ajax.Request(url, {	                method: 'GET',	                asynchronous: true,					onSuccess: (function(transport) {												try {							var jsonObject;														eval("jsonObject = " + transport.responseText);														var stencilsets = this.facade.getStencilSets();														var stencilset = stencilsets[jsonObject["extends"]];							stencilset.addExtension(jsonObject);							
						} catch (e) {							Ext.Msg.alert("Oryx", "Loading stencil set extension failed. Maybe the extension file is not valid.");						}							this.facade.raiseEvent({type:'loading.disable'});											}).bind(this),					onFailure: (function(transport) {						Ext.Msg.alert("Oryx", "Loading stencil set extension failed. The request returned an error.");												this.facade.raiseEvent({type:'loading.disable'});					}).bind(this)				});			}
			}).bind(this));		}};ORYX.Plugins.SSExtensionLoader = Clazz.extend(ORYX.Plugins.SSExtensionLoader);