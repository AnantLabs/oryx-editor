/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if(!ORYX.Plugins) {	ORYX.Plugins = new Object();}ORYX.Plugins.Toolbar = {	facade: undefined,	construct: function(facade, ownPluginData) {		this.facade = facade;				this.groupIndex = {};		ownPluginData.properties.each((function(value){			if(value.group && value.index != undefined) {				this.groupIndex[value.group] = value.index			}		}).bind(this));				Ext.QuickTips.init();		this.buttons = [];	},	registryChanged: function(pluginsData) {		var plugs =  pluginsData.sortBy((function(value) {			return ((this.groupIndex[value.group] != undefined ? this.groupIndex[value.group] : "" ) + value.group + "" + value.index);		}).bind(this));				this.buttons = [];		/* Ext 1.1 code. Replaced by Ext 2.0.		var node = ORYX.Editor.graft("http://www.w3.org/1999/xhtml",			null,			['div']);		var toolbar = new Ext.Toolbar(node);*/		ORYX.Log.trace("Creating a toolbar.")		var toolbar = new Ext.Toolbar({			height: 24		});				var currentGroupsName = plugs[0].group;		var region = this.facade.addToRegion("north", toolbar, "Toolbar");				plugs.each((function(value) {			if(currentGroupsName != value.group) {					toolbar.add('-');					currentGroupsName = value.group			}			var button = new Ext.Toolbar.Button({			        icon: 			value.icon,			// icons can also be specified inline			        cls: 			'x-btn-icon',		// Class who shows only the icon			        tooltip: 		value.description,	// Set the tooltip					tooltipType: 	'title',			// Tooltip will be shown as in the html-title attribute					handler: 		value.functionality	// Handler for mouse click			    })									toolbar.add(button);			button.getEl().onclick = function() {this.blur()}			value['buttonInstance'] = button;			this.buttons.push(value);					}).bind(this));		this.enableButtons([])/* Ext 1.1 code. Replaced by Ext 2.0.		var layout = this.facade.getLayout();		layout.addRegion('north',{	                        split:false,	                        initialSize: 28,	                        titlebar: false	                    });		layout.beginUpdate();		layout.add('north', new Ext.ContentPanel(node, 'North'));		layout.endUpdate();*/	/* Ext 1.1 code. Replaced by Ext 2.0.		// Create a logo in the toolbar		ORYX.Editor.graft("http://www.w3.org/1999/xhtml", node.firstChild,					['a', {'href':'http://www.hpi.uni-potsdam.de', target:'_blank', 'style':'position:absolute; right:2px; top:2px;'}, 						['img', {src: ORYX.PATH + 'images/powered_by_hpi.png', height:'22px'}]]);*/	},		onSelectionChanged: function(event) {		this.enableButtons(event.elements);	},	enableButtons: function(elements) {		// Show the Buttons		this.buttons.each((function(value){			value.buttonInstance.enable();									// If there is less elements than minShapes			if(value.minShape && value.minShape > elements.length)				value.buttonInstance.disable();			// If there is more elements than minShapes			if(value.maxShape && value.maxShape < elements.length)				value.buttonInstance.disable();				// If the plugin is not enabled				if(value.isEnabled && !value.isEnabled())				value.buttonInstance.disable();					}).bind(this));			}}ORYX.Plugins.Toolbar = Clazz.extend(ORYX.Plugins.Toolbar);