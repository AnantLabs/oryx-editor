/** * Copyright (c) 2008, Christoph Neijenhuis * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if (!ORYX.Plugins)     ORYX.Plugins = new Object();ORYX.Plugins.StepThroughPlugin = Clazz.extend({    facade: undefined,        construct: function(facade){		        this.facade = facade;        		this.active = false;		this.el 	= undefined;		this.callback = undefined;		this.firedObjects = ""; // A string containing all objects that have been fired		this.automationLevel = 1; // Current automation level, changing is disabled at the moment		this.rdf = undefined;		this.errors = "";		        this.facade.offer({            'name': "Step Through",            'functionality': this.load.bind(this),            'group': "StepThrough",            'icon': ORYX.PATH + "images/control_play.png",            'description': "Step through your BPMN model",            'index': 1,            'minShape': 0,            'maxShape': 0        });				this.facade.offer({            'name': "Undo",            'functionality': this.undo.bind(this),            'group': "StepThrough",            'icon': ORYX.PATH + "images/control_rewind.png",            'description': "Undo",            'index': 2,            'minShape': 0,            'maxShape': 0        });				// The following buttons belong to the automated step through which isn't enabled/*		this.facade.offer({            'name': "Lower Automation Level",            'functionality': this.lowerAuto.bind(this),            'group': "StepThrough",            'icon': ORYX.PATH + "images/magnifier_zoom_out.png",            'description': "Lower the Automation Level",            'index': 3,            'minShape': 0,            'maxShape': 0        });				this.facade.offer({            'name': "Raise Automation Level",            'functionality': this.higherAuto.bind(this),            'group': "StepThrough",            'icon': ORYX.PATH + "images/magnifier_zoom_in.png",            'description': "Raise the Automation Level",            'index': 4,            'minShape': 0,            'maxShape': 0        });*/    },		load: function() {		// Called when the user loads or unloads the plugin		if (this.active) {			// Reset vars			this.firedObjects = "";			this.rdf = undefined;			this.errors = "";						// Hide overlays			this.hideOverlays();		} else {			// Check Syntax			this.checkSyntax();			if(this.errors != "") {				// show errors				this.showErrors(this.errors);								// Display a message so the user knows what is going on				Ext.Msg.alert("Oryx", "Can't step through this diagram.");								this.active = !this.active;					return;			}			else {				this.start();								}				}				this.active = !this.active;					if( this.active ){			this.callback = this.doMouseUp.bind(this)			this.facade.registerOnEvent("mouseup", this.callback)					} else {			this.facade.unregisterOnEvent("mouseup", this.callback)			this.callback = undefined;		}					},		// The following belongs to the automation step through stuff	/*	lowerAuto: function() {		if(this.automationLevel > 0) {			this.automationLevel = this.automationLevel - 1;		}		this.displayAutoLevel();	},		higherAuto: function() {		if(this.automationLevel < 3) {			this.automationLevel = this.automationLevel + 1;		}		this.displayAutoLevel();	},		displayAutoLevel: function() {		var txt = "";		if(this.automationLevel == 0) txt = "No Automation";		if(this.automationLevel == 1) txt = "Semi Automation";		if(this.automationLevel == 2) txt = "Full Automation";		if(this.automationLevel == 3) txt = "Hyper Automation";				this.facade.raiseEvent({			type: 'loading.status',			text: txt		});	},	*/		hideOverlays: function() {		// hides all overlays		var els = this.facade.getCanvas().getChildShapes(true);		var el;		for(i = 0; i < els.size(); i++) {			el = els[i];			// This may send hide-events for objects that have no overlay			this.facade.raiseEvent({				type: "overlay.hide",				id: "st." + el.resourceId			});		}	},		generateRDF: function() {		//get current DOM content		var serializedDOM = DataManager.__persistDOM(this.facade);		//add namespaces		serializedDOM = '<?xml version="1.0" encoding="utf-8"?>' +		'<html xmlns="http://www.w3.org/1999/xhtml" ' +		'xmlns:b3mn="http://b3mn.org/2007/b3mn" ' +		'xmlns:ext="http://b3mn.org/2007/ext" ' +		'xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" ' +		'xmlns:atom="http://b3mn.org/2007/atom+xhtml">' +		'<head profile="http://purl.org/NET/erdf/profile">' +		'<link rel="schema.dc" href="http://purl.org/dc/elements/1.1/" />' +		'<link rel="schema.dcTerms" href="http://purl.org/dc/terms/ " />' +		'<link rel="schema.b3mn" href="http://b3mn.org" />' +		'<link rel="schema.oryx" href="http://oryx-editor.org/" />' +		'<link rel="schema.raziel" href="http://raziel.org/" />' +		'<base href="' +		location.href.split("?")[0] +		'" />' +		'</head><body>' +		serializedDOM +		'</body></html>';				//convert to RDF		var parser = new DOMParser();		var parsedDOM = parser.parseFromString(serializedDOM, "text/xml");		var xsltPath = ORYX.PATH + "lib/extract-rdf.xsl";		var xsltProcessor = new XSLTProcessor();		var xslRef = document.implementation.createDocument("", "", null);		xslRef.async = false;		xslRef.load(xsltPath);		xsltProcessor.importStylesheet(xslRef);		try {			var new_rdf = xsltProcessor.transformToDocument(parsedDOM);			var serialized_rdf = (new XMLSerializer()).serializeToString(new_rdf);						// Firefox 2 to 3 problem?!			serialized_rdf = !serialized_rdf.startsWith("<?xml") ? "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + serialized_rdf : serialized_rdf;		} catch (error){			this.facade.raiseEvent({type:'loading.disable'});			Ext.Msg.alert("Oryx (rdf)", error);	 	}				this.rdf = serialized_rdf;	},		getRDF: function() {		if(this.rdf == undefined) {			this.generateRDF();		}				return this.rdf;	},		checkSyntax: function() {		this.errors = "";		var serialized_rdf = this.getRDF();				// Send the request to the server.		new Ajax.Request(ORYX.CONFIG.STEP_THROUGH_CHECKER, {			method: 'POST',			asynchronous: false,			parameters: {				rdf: serialized_rdf			},			onSuccess: (function(request){				this.errors = request.responseText;				}).bind(this)		});	},			start: function() {		// Force to set all resource IDs		var serializedDOM = DataManager.serializeDOM( this.facade );				var serialized_rdf = this.getRDF();				// Send the request to the server.		new Ajax.Request(ORYX.CONFIG.STEP_THROUGH, {			method: 'POST',			asynchronous: false,			parameters: {				rdf: serialized_rdf,				fire: this.firedObjects,				onlyChangedObjects: "false"			},			onSuccess: (function(request){				this.showObjectStates(request.responseText);				}).bind(this)		});	},	fireObject: function(objResourceId) {		// Add this object to firedObjects		this.firedObjects = this.firedObjects + objResourceId + "," + this.automationLevel + ";";				//serialized_rdf = this.generateRDF();		var serialized_rdf = this.getRDF();				// Send the request to the server.		new Ajax.Request(ORYX.CONFIG.STEP_THROUGH, {			method: 'POST',			asynchronous: false,			parameters: {				rdf: serialized_rdf,				fire: this.firedObjects,				onlyChangedObjects: "true"			},			onSuccess: (function(request){				this.showObjectStates(request.responseText);				}).bind(this)		});	},		onSelectionChanged: function() {		// stops the user from editing the diagram while the plugin is active		if (this.active && this.facade.getSelection().length > 0) {			this.facade.setSelection([]);		}	},		doMouseUp: function(event, arg){		if( arg instanceof ORYX.Core.Shape){			this.el = arg;			this.fireObject(this.el.resourceId);		}	},		showObjectStates: function(objs) {		var objsAndState = objs.split(";");		for(i = 0; i < objsAndState.size(); i++) {			var objAndState = objsAndState[i].split(",");			if (objAndState.size() < 3) {				continue;			}			var obj = this.facade.getCanvas().getChildShapeByResourceId(objAndState[0]);			if(objAndState[2] == "t") { // Is enabled				this.showEnabled(obj, objAndState[1]);			} else if(objAndState[1] != "0"){ // has been used				this.showUsed(obj, objAndState[1]);			} else { // Was enabled, has not been used				this.facade.raiseEvent({					type: "overlay.hide",					id: "st." +  objAndState[0]				});			}		}	},		showEnabled: function(shape, display){		// Creates overlay for an enabled shape		// display is beeing ignored		if(!(shape instanceof ORYX.Core.Shape)) return;				var attr;		if(shape instanceof ORYX.Core.Edge) {			attr = {fill: "green", stroke: "green"};		}		else {			attr = {fill: "green", stroke:"black", "stroke-width": 2};		}				var play = ORYX.Editor.graft("http://www.w3.org/2000/svg", null ,				['path', {					"title":"Click the element to execute it!", "stroke-width": 2.0, "stroke":"black", "d":  "M0,-5 L5,0 L0,5 Z", "line-captions": "round"					}]);											this.facade.raiseEvent({				type: 			"overlay.show",				id: 			"st." + shape.resourceId,				shapes: 		[shape],				attributes: 	attr,				node:			play,				nodePosition:	shape instanceof ORYX.Core.Edge ? "END" : "SE"			});	},		showUsed: function(shape, display){		// Creates overlay for a shape that has been used and is not enabled		if(!(shape instanceof ORYX.Core.Shape)) return;				var attr;		if(shape instanceof ORYX.Core.Edge) {			attr = {fill: "mediumslateblue", stroke: "mediumslateblue"};		}		else {			attr = {fill: "mediumslateblue", stroke:"black", "stroke-width": 2};		}				var text = ORYX.Editor.graft("http://www.w3.org/2000/svg", null ,                                        ['text', {                                                "style": "font-size: 16px; font-weight: bold;"                                                },                                                   display]);											this.facade.raiseEvent({				type: 			"overlay.show",				id: 			"st." + shape.resourceId,				shapes: 		[shape],				attributes: 	attr,				node:			text,				nodePosition:	shape instanceof ORYX.Core.Edge ? "END" : "SE"			})	},			showErrors: function(errorstring) {		// When the syntax check goes wrong, the errors including explenation are shown		var errors = errorstring.split(";");		for(i = 0; i < errors.size(); i++) {			var error = errors[i].split(":");			if (error.size() < 2) {				continue;			}			var obj = this.facade.getCanvas().getChildShapeByResourceId(error[0]);						var cross = ORYX.Editor.graft("http://www.w3.org/2000/svg", null ,				['path', {					"title":error[1], "stroke-width": 5.0, "stroke":"red", "d":  "M20,-5 L5,-20 M5,-5 L20,-20", "line-captions": "round"					}]);			this.facade.raiseEvent({				type: 			"overlay.show",				id: 			"st." + obj.resourceId,				shapes: 		[obj],				node:			cross,				nodePosition:	obj instanceof ORYX.Core.Edge ? "START" : "NW"			});			}	},		undo: function() {		// Removes last fired object and creates overlays again from scratch		if(this.firedObjects == "") return;		// Remove last semicolon		this.firedObjects = this.firedObjects.substring(0, this.firedObjects.length - 1);		// Remove string after the next last semicolon		var lastSemicolon = this.firedObjects.lastIndexOf(";");		if(lastSemicolon == -1) { // There was only one element in the list.			this.firedObjects = "";		}		else {			this.firedObjects = this.firedObjects.substring(0, lastSemicolon + 1);		}				// Display overlays after undo		this.hideOverlays();				//serialized_rdf = this.generateRDF();		var serialized_rdf = this.getRDF();				// Send the request to the server.		new Ajax.Request(ORYX.CONFIG.STEP_THROUGH, {			method: 'POST',			asynchronous: false,			parameters: {				rdf: serialized_rdf,				fire: this.firedObjects,				onlyChangedObjects: "false"			},			onSuccess: (function(request){				this.showObjectStates(request.responseText);				}).bind(this)		});	}});