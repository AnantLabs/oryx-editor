.. _setup-and-installation:

************************
 Setup and Installation
************************

Getting the Source Code
=======================

The primary source code repository for JInfoCard is hosted at
`Sourceforge <http://sourceforge.net/projects/informationcard>`_. It
can be retrieved from the project's `Subversion
<http://subversion.tigris.org>`_ repository by executing the following
command:

:command:`svn co https://informationcard.svn.sourceforge.net/svnroot/informationcard/trunk JInfoCard`

This will create a folder ``JInfoCard`` in the current working
directory, containing the two subdirectories ``framework`` and
``minishop``.  The first contains the JInfoCard framework, a library
which can be integrated into any Java-based web application to enable
the use of claims-based authentication via information cards.  The
directory ``minishop`` contains the sample web application hosted at
https://www.jinfocard.org/ (and http://www.jinfocard.org/) which
illustrates how the user identity generated by the framework can be
integrated into a sample web application.


Framework:
==========

JInfoCard uses `Maven <http://maven.apache.org/>`_ for the
build system. This greatly simplifies dependency handling and
deployment, so that once Maven is `installed
<http://maven.apache.org/run-maven/index.html>`_, the framework can be
built and installed by issuing the command

:command:`mvn install`

from within the ``framework`` directory.  This will download all the
dependencies, build the jar file for the framework and install it into
the local maven repository, so it is ready to be used as a dependency
from other projects, such as the ``minishop`` example website described
below.

.. note::

   If your internet connection requires you to use a proxy, you must
   instruct Maven to use it.  You can do this by specifying the
   settings on the command line for each command as follows:

   :command:`mvn -Dhttp.proxyHost=proxy.example.com -Dhttp.proxyPort=8080 ...`

   Alternatively, you can edit your Maven configuration to make these
   settings permanent. Please refer to the Maven documentation at
   http://maven.apache.org/guides/mini/guide-proxies.html for details
   on how to do this.

MiniShop:
=========

The Website requires a little more setup to adapt it to your
environment.  This documentation shows the steps necessary to deploy
the sample web application on the `Tomcat 6
<http://tomcat.apache.org/>`_ webapp container. If you're planning to
use a different server, please refer to the documentation of your
container for the relevant details.

Prerequisites
-------------

While Maven handles the dependency tracking for the libraries
JInfoCard depends upon, some extra setup is necessary to enable the
strong cryptography used by JInfoCard.

.. _jce-policy-files:

Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Because JInfoCard requires strong cryptography support from the JVM,
it requires the "Java Cryptography Extension (JCE)
Unlimited Strength Jurisdiction Policy Files 6", available from
http://java.sun.com/javase/downloads/index.jsp (under "Other
Downloads" at the bottom of the page), to be installed.  Please refer
to the documentation of the JCE policy files for instructions on how
to install them into your JVM.

Endorsed libraries
^^^^^^^^^^^^^^^^^^

In addition, JInfoCard requires that a current version of the Apache
Xalan and Xerces libraries as well as the BouncyCastle JCE
provider be endorsed. To do this, run the command

:command:`mvn dependency:copy-dependencies`

in the minishop directory. This downloads all dependencies and places
them in the directory ``target/dependency``, from which the files
listed below must be copied into either the directory
``$TOMCAT_HOME/endorsed`` (``$TOMCAT_HOME/common/endorsed`` for Tomcat
version 5.5 and below) or the JRE endorsed directory (usually located
at ``$JAVA_HOME/lib/endorsed``).

If another web application container is used, please refer to its
documentation for the correct location of endorsed libraries.

List of libraries to endorse:

- bcprov-jdk15-138.jar
- resolver.jar
- serializer.jar
- xalan.jar
- xercesImpl.jar
- xml-apis.jar

Basic setup
"""""""""""

Copy (or rename) the file example-web.xml to web.xml in the
directory ``src/main/webapp/WEB-INF`` and edit it to reflect your local
setup.

.. _ssl:

SSL support
^^^^^^^^^^^

If you're planning to enable SSL support for your deployment, you'll
also need to copy the Keystore (in PKCS#12 or JKS format) containing
your site's certificate and private key into the directory
``src/main/resources`` and edit the web.xml file (see above) to enable
the framework to access the private key.

The Tomcat web application server requires some configuration in order
to accept SSL connections. The configuration file
``$TOMCAT_HOME/conf/server.xml`` needs to be adapted to contain the
following entry::

  [...]
  <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
             maxThreads="150" scheme="https" secure="true"
             clientAuth="false" sslProtocol="TLS" 
             keystoreFile="/path/to/keystore.p12"
             keystorePass="s3cr3t"
             alias="your_certificate_alias" />

  [...]

The default ``server.xml`` file already contains such an entry
(commented out), which can be used as a template.  A detailed
description of all the options and other methods of configuring SSL
support are available in the `Tomcat documentation
<http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html>`_.

While it is *strongly* recommended to use an SSL certificate issued by
a trusted Certification Authority (CA), it is possible to use the following
`OpenSSL <http://www.openssl.org/>`_ commands to create a self-signed
keystore *for testing purposes*::

  # generate self-signed CA cert
  openssl req -x509 -new -out cacert.crt -keyout cacert.key -days 99999

  #generate private key
  openssl genrsa -des3 -out example.org.key 2048

  # generate certificate signing request
  # when asked for the common name, enter the hostname of the url
  # you'll be using for JInfoCard.
  openssl req -new -key example.org.key -out example.org.csr

  # sign the request
  openssl x509 -req -in example.org.csr \
    -CA cacert.crt -CAkey cacert.key -CAcreateserial \
    -out example.org.crt -days 99990

  # generate cert bundles
  cat cacert.crt example.org.key example.org.crt > example.org.pem
  openssl pkcs12 -export -in example.org.pem -out example.org.p12 \
    -name ""

The new PKCS#12 keystore can be found in the file ``example.org.p12``;
the passwords used in the various steps should be used to configure
JInfoCard as described above. 

.. warning::

   Using a self-signed certificate as described in the preceding
   paragraph will require all potential users/customers of the site
   using JInfoCard to add the CA certificate (``cacert.crt``)
   generated in the first step to their systems' trusted certificate
   store.  Depending on the user's operating system and browser, this
   can be a fairly involved and error-prone procedure which not all
   users may be able to accomplish, so, as mentioned above, it is
   *strongly* recommended to obtain a proper certificate from a
   trusted CA.


Build the MiniShop
""""""""""""""""""

Just execute the command

:command:`mvn package`

in the directory containing the minishop source. This will again
retrieve necessary dependencies (including the framework you built
above) and build everything. You can then deploy the generated Web
Application, located at ``target/minishop2.war``, into your Tomcat
installation.
