#summary Coming soon...

 * facade
 * events (com between plugins)
 * UI plugin vs. functionality plugin
 * aufbau

== The Facade ==

The facade is the interface to access the editor. The interface object is one of the parameters of a plugin's constructor. The following methods are defined in the interface:

{{{
offer(pluginData: Object): void

getStencilSets(): Hash
getRules(): ORYX.Core.StencilSet.Rules
loadStencilSet(source:URL): void

createShape(option:Object): ORYX.Core.Shape
deleteShape(shape:ORYX.Core.Shape): void
getSelection(): ORYX.Core.Shape[]
setSelection(elements:ORYX.Core.Shape[], subSelectionElements:ORYX.Core.Shape[]): void
updateSelection(): void
getCanvas(): ORYX.Core.Canvas

importJSON(jsonObject: JSON, noSelectionAfterImport: boolean): ORYX.Core.Shape[]
importERDF(erdfDOM: XMLDocument): ORYX.Core.Shape[]
getERDF(): string

executeCommands(commands: ORYX.Core.Command[]): void
registerOnEvent(eventType: string, callback: function): void
unregisterOnEvent(eventType: string, callback: function): void
registerEventType(eventType: string): void (TODO: REMOVE THIS METHOD!!!)
raiseEvent(event: Object, uiObj: ORYX.Core.UIObject): void
enableEvent(eventType: string): void
disableEvent(eventType: string): void
eventCoordinates(event: Event): SVGPoint

getLayout(): Ext.Panel | Ext.Viewport
addToRegion(region: string, component: Ext.Component, title: String): Ext.Component
}}}

===offer===

{{{
offer(pluginData): void
}}}

*Parameters:*

 * _pluginData_: Object with the following properties
   * _name_: string
     * Name of the feature.
   * _functionality_: function
     * Callback of the feature.
   * _group_: string
     * Name of the group the feature belongs to (e. g. used by toolbar).
   * _icon_: string
     * URL to an icon for the feature. URL must be absolute or relative to the root folder.
   * _description_: string
     * Description of the feature
   * _index_: int
     * Index for ordering of one group's features.
   * _minShape_: int
     * Minimum number of shapes that have to be selected so that the feature is available/activated.
   * _maxShape_: int
     * Maximum number of shapes that have to be selected so that the feature is available/activated.
   * _isEnabled_: function
     * Optional callback that activates the feature, if it returns *true*, or deactivates it, if it returns *false*.

*Description:*

A plugin must register each of its features with this method. This method shall be called in the constructor of the plugin. Once registered, the features are available in the toolbar or any other plugin that offers a UI for accessing other plugins' features.


===getStencilSets===

{{{
getStencilSets(): Hash
}}}

*Returns:*

A hash object with the stencil sets' namespaces of all available stencil sets as keys and the stencil set objects (_ORYX.Core.StencilSet.StencilSet_) as values.

*Description:*

This method is used for accessing the loaded stencil sets.


===getRules===

{{{
getRules(): ORYX.Core.StencilSet.Rules
}}}

*Returns:*

An object of type _ORYX.Core.StencilSet.Rules_ that enables you to check if two shapes can be connected or contain each other.


===loadStencilSet===

{{{
loadStencilSet(source:URL): void
}}}

*Parameters:*

 * _source_:URL
   * URL that points to a stencil set's definition file.

*Description:*

Calling this method loads a stencil set and fires a _stencilSetLoaded_ event.


===createShape===

{{{
createShape(option:Object): ORYX.Core.Shape
}}}

*Parameters:*

 * _object_: Object
   * Object with parameters about the new shape

*Returns:*

The created shape object.

*Description:*

This method will soon be reimplemented, because it was initially designed for a specific case. If you need it, check the code where the method is used.


===deleteShape===

{{{
deleteShape(shape:ORYX.Core.Shape): void
}}}

*Parameters:*

 * _shape_: ORYX.Core.Shape
   * Shape that you want to delete.


===getSelection===

{{{
getSelection(): ORYX.Core.Shape[]
}}}

*Returns:*

An array of shape objects that are selected.


===setSelection===

{{{
setSelection(elements:ORYX.Core.Shape[], subSelectionElements:ORYX.Core.Shape[]): void
}}}

*Parameters:*

 * _elements_: ORYX.Core.Shape[]
   * Shape objects to select.
 * _subSelectionElements_: ORYX.Core.Shape[]
   * A sub set of the selected objects for sub selection.

*Description:*

Set the selection of shape objects with this method. The method also fires a "selectionChanged" event.


===updateSelection===

{{{
updateSelection(): void
}}}

*Description:*

Fires a "selectionChanged" event.


===getCanvas===

{{{
getCanvas(): ORYX.Core.Canvas
}}}

*Returns:*

The editor's canvas object.


===importJSON===

{{{
importJSON(jsonObject: JSON, noSelectionAfterImport: boolean): ORYX.Core.Shape[]
}}}

*Parameters:*

 * _jsonObject_: Object
   * JSON object that describes all shapes to import. It has the following structure:
     * ...
 * _noSelectionAfterImport_: boolean
   * If _true_, the imported objects will not be selected.

*Returns:*

An array of all created shapes.


===importERDF===

{{{
importERDF(erdfDOM: XMLDocument): ORYX.Core.Shape[]
}}}

*Parameters:*

 * _erdfDOM_: XMLDocument
   * An XML document containing process data in eRDF format.

*Returns:*

An array of all created shapes.


===getERDF===

{{{
getERDF(): string
}}}

*Returns:*

A string that represents the current model in eRDF format.


===executeCommands===

{{{
executeCommands(commands: ORYX.Core.Command[]): void
}}}

*Parameters:*

 * _commands_: ORYX.Core.Command[]
   * Array of Command objects. The Command class is abstract and must be extended by a sub class. The Command class defines the methods _execute_ and _rollback_.

*Description:*

If your feature needs undo/redo support, you have to implement it as a sub class of ORX.Core.Command and execute it with this method. 


===registerOnEvent===

{{{
registerOnEvent(eventType: string, callback: function): void
}}}

*Parameters:*

 * _eventType_: string
   * The type of event you want to register a callback. The types are defined in the file config.js.
 * _callback_: function
   * Function that is called when the event occurs. The parameters of the function are event specific.

*Description:*

Use this method to react on event occurrence.