#summary Requirements for Stencil Set extension

= Introduction =

Although the current stencil set specification was good enough for implementing various stencil sets, there are some restrictions we now want to get rid of. The stencil set extension shall mainly ease the definition of stencil sets and introduce ways of extending existing stencil sets with properties.

= Requirements (Ordered by Priority) =

== Backwards Compatibility ==

The changes on the stencil set specification may not have an impact on existing stencil sets. Only very small adjustments that could be done for all existing stencil sets as part of this project are allowed.


== Extend existing Stencil Sets ==

_Issue #53_

For adding properties to stencils of an existing stencil set or adding another stencil to an existing stencil set, I want to introduce stencil set extensions. Those extensions are no complete stencil sets on their own. In an extension you can define properties for existing stencils, new stencils and rules to connect a new stencil with the existing ones. With these extensions you can for example add a property to BPMN Activities for costs.

The user must be able to load those extensions at run-time. This information must also be stored in the diagram's meta data so that the extension is automatically loaded when opening the process model at a later time.

The first version should only add properties to existing stencils.


== Stencil Set dependant Plugins ==

_Issue #140_

There are several plugins that can only be used with BPMN models, for example the PNML export. But the plugins are also loaded when creating an EPC model. Therefore, it should be possible to load those plugins stencil set dependant.


== Property Packages ==

Currently, you have to define the properties for each stencil seperately. In case of BPMN this restriction blows the stencil set definition up to almost 6000 lines. But also in this case, all stencils share some general properties and each group of stencils (e.g. Intermediate Events) has even more properties in common. That is why I want to introduce property packages to define properties only once and then add 0..n property packages to a stencil. Of course, you can still add properties to a stencil directly.


== Property-dependant Properties ==

In case of BPMN Intermediate Events an event has different properties dependant on the value of the property _Trigger_. To only show the valid properties is currently not possible in Oryx. That is why I want to add the option that a property is only shown, when another property has a specific value.


== Different Categories for Properties ==

_Issue #43_

For reason of clarity it should be possible to group properties in the Property Window just the same way you can already group stencils in the Shape Repository.


== Event Callbacks ==

_Issues #28, #47_

The stencil set specification should support event callbacks to react on changes of a shape. Already existing callbacks:
 * layout
 * serialize
 * deserialize
 * canConnect
 * canContain

New Callback:
 * onPropertyChanged
   * Called whenever a stencil's property at run time has been changed.
   * Use case (from let's dance stencil set): There is a stencil with a text property name and a color property that sets the stencil's background color. At runtime you have a stencil instance A where you set the text to 'abc' and the color to purple. Then you create another stencil instance B and also set the text to 'abc'. At this point, the color of stencil B should be automatically set to A's color, because they have the same text.

=== Remarks ===

Because canContain and canConnect have a major impact on the performance, we decided in the team meeting on 4th June 08 to exclude them from the specification.