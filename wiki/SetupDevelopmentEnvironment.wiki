#summary This guide shows how to set up and configure a development environment in order to build the Oryx application from source.

= WORK IN PROGRESS. IF YOU HAVE PROBLEMS FOLLOWING THESE INSTRUCTIONS, DROP US A COMMENT OR FIX IT BY YOURSELF. THANK YOU! =

= Introduction =
This guide primarily addresses developers. If you intend to simply install, update or configure the standard version of Oryx, please read the [http://code.google.com/p/oryx-editor/wiki/InstallUpdateConfigureProductiveSystems installation guide].

In case you're experiencing any problems, feel free to contact us by mail or join out discussion group.

= What do you need to get started? =
The Oryx application consists of 2 major parts. The first part contains the editor itself and stateless Java Servlets running on the Tomcat webserver. In addition to that the second part contains the Oryx Repository and statefull Java Servlets including the database. It is possible to run the first part stand-alone without the database, repository and the backend. Note that you won't be able to save any models without the backend.
Therefore if your development focus lies on the editor functionality and you don't need to modify the repository or backend, you may skip the steps concerning database configuration. 

Basic installation instructions for 3rd party software can be found [http://code.google.com/p/oryx-editor/wiki/Install3rdPartyApplication here]. Remember that you need the JAVA JDK not only the JAVA SDK to build the application. 

== Installing JDK ==

The Java SE 5.0 Development Kit is required for building the project. You can download it [http://java.sun.com/javase/downloads/index.jsp here].

== Installing Eclipse IDE ==

You will need a !JavaScript development environment to start Oryx Editor development. You may prefer a simple text editor or one that has special support for !JavaScript. However, we recommend you get yourself the [http://www.aptana.com/ Aptana IDE], which has served the original development team well. This instructions will guide you to a working setup as an Eclipse plugin:
  # [http://www.eclipse.org/downloads/ Download] and extract/install Eclipse 3.4. You may prefer the 'Classic' distribution. If you decide to use another distribution, make sure that Ant is included. When using a newer version of Eclipse, check for Aptana IDE compatibility.
  # Start Eclipse.
  # With the help of the integrated Software Update mechanism, install the plugins from the following update site URL: [http://update.aptana.com/update/studio/3.2/ http://update.aptana.com/update/studio/3.2/]. Open the link in your browser to get more information on how to install the Aptana plugin.
  # You will have to restart Eclipse.
  # Unless your Elipse version has integrated support for SVN, install it from the update site URL [http://subclipse.tigris.org/update_1.2.x http://subclipse.tigris.org/update_1.2.x] using the same mechanism. Note: You still need to install a subversion client to make Subclipse work.
  # Again, you will have to restart Eclipse.

Make sure that Eclipse uses the previously installed JDK. To check this, do the following:
  # Open _Window_ -> _Preferences..._ .
  # In the tree view on the left open _Java_ -> _Installed JREs_.
  # If the JDK is included in the list of installed JREs, mark it as the default JRE by checking the box in the first column. If the JDK is not included in the list, you have to add it first.
  # Click on _OK_ to apply the changes.

== Install Firefox 3 ==
[http://www.mozilla.com/ Download] the latest version of Firefox 3 and install it. In addition to that it's recommended to install Firebug and the web developer toolbar. (Click on Tools/Add-ons/Get Add-ons and search for these two tools). We recommend to use the toolbar to turn off caching during javascript debugging. 

== Checkout the Project from Eclipse ==

 # Start Eclipse.
 # Open _File_ -> _Import_.
 # Under the node _Other_ choose _Checkout Projects from SVN_.
 # Enter the URL of the trunk. You can find the URL [http://code.google.com/p/oryx-editor/source/checkout here]. The trunk contains an Eclipse project file and will automatically be found. Downloading the trunk may take a while.

== Configure Build Properties ==
Open the file _build.properties_ in the root folder of the Oryx trunk and set _deploymentdir_ to the path of your Tomcat webapps directory. Don't put the path into quotation marks but escape all backslash characters on windows systems (use \\ instead of \).  If you like to debug Java code, then also set java-debug to _on_. 

== Configure Eclipse External Tools==
The whole application is build using Apache ANT. Instead of launching ANT from bash or command line Eclipse provides a convenient way to use ANT from the GUI.
Click on to the _Run/External Tools/External Tools Configurations_ in the eclipse menu. Create a new ANT build in the configurations window and select the _build.xml_ file in the SVN root directory as buildfile. After that switch to the _Target_ tab.
The targets you need depend on the part of Oryx you use:
  * If you use the editor without backend and database select _build-editor_ and _deploy editor_  
  * But if you also use the repository and backend with database then select _rebuild-all_ and _deploy-all_ instead.
Finally go to the JRE tab and make sure that at least a Java 1.5 runtime is selected.
Now you can run the task. Don't worry if you see some warnings on the console output. As long as ANT prints out _BUILD SUCCESSFUL_ in the everything is fine. 
  
== Run ==

If Oryx is deployed successfully, you can start the tomcat and open the example page _editor.xhtml_ that loads Oryx with the BPMN stencil set. In the default configuration of Tomcat, the URL would be [http://localhost:8080/oryx/editor.xhtml http://localhost:8080/oryx/editor.xhtml]. Again this on applies if you are using the editor only. In the full installation (editorm, repository and backend) open [http://localhost:8080/backend/poem/repository http://localhost:8080/backend/poem/repository] instead

Congratulation! You have now set up your development environment for Oryx.

== Debug ==

For debugging server-side plugins you have to do the following:
  # In Eclipse open _Debug..._ .
  # Add a new _Java Remote Application_ and enter a name like "Oryx debug".
  # On tab _Connect_ set the project to Oryx.
  # Click on _Apply_ and then _Debug_.

Now you should be able to set breakpoints and debug your Java code.