#summary This guide shows how to set up and configure a development environment in order to build the Oryx application from source.

= WORK IN PROGRESS. THIS IS A NEW ARTICLE AND ITS CONTENT IS STILL INCOMPLETE! =

= Introduction =
This guide primarily addresses developers. If you intend to simply install, update or configure the standard version of Oryx, please read the [http://code.google.com/p/oryx-editor/wiki/InstallUpdateConfigureProductiveSystems installation guide].

In case you're experiencing any problems, feel free to contact us by mail or join out discussion group.

= What do you need to get started? =
The Oryx application consists of 2 major parts. The first part contains the editor itself and stateless Java Servlets running on the Tomcat webserver. In addition to that the second part contains the Oryx Repository and statefull Java Servlets including the database. It is possible to run the first part stand-alone without the database, repository and the backend. Note that you won't be able to save any models without the backend.
Therefore if your development focus lies on the editor functionality and you don't need to modify the repository or backend, you may skip the steps concerning database configuration. 

= Install Necessary Software =

== Installing JDK ==

The Java SE 5.0 Development Kit is required for building the project. You can download it [http://java.sun.com/javase/downloads/index.jsp here].

== Installing Eclipse IDE ==

You will need a !JavaScript development environment to start Oryx Editor development. You may prefer a simple text editor or one that has special support for !JavaScript. However, we recommend you get yourself the [http://www.aptana.com/ Aptana IDE], which has served the original development team well. This instructions will guide you to a working setup as an Eclipse plugin:
  # [http://www.eclipse.org/downloads/ Download] and extract/install Eclipse 3.4. You may prefer the 'Classic' distribution. If you decide to use another distribution, make sure that Ant is included. When using a newer version of Eclipse, check for Aptana IDE compatibility.
  # Start Eclipse.
  # With the help of the integrated Software Update mechanism, install the plugins from the following update site URL: [http://update.aptana.com/update/studio/3.2/ http://update.aptana.com/update/studio/3.2/]. Open the link in your browser to get more information on how to install the Aptana plugin.
  # You will have to restart Eclipse.
  # Unless your Elipse version has integrated support for SVN, install it from the update site URL [http://subclipse.tigris.org/update_1.2.x http://subclipse.tigris.org/update_1.2.x] using the same mechanism. Note: You still need to install a subversion client to make Subclipse work.
  # Again, you will have to restart Eclipse.

Make sure that Eclipse uses the previously installed JDK. To check this, do the following:
  # Open _Window_ -> _Preferences..._ .
  # In the tree view on the left open _Java_ -> _Installed JREs_.
  # If the JDK is included in the list of installed JREs, mark it as the default JRE by checking the box in the first column. If the JDK is not included in the list, you have to add it first.
  # Click on _OK_ to apply the changes.

== Install Firefox 3 ==

= ... =