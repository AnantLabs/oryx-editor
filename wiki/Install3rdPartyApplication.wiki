#summary Provides quick installation guides for all required 3rd party applications.

= Introduction =
The following quick start guides demonstrate, how to install all needed software packages using the default configuration. You may have to customize the given examples according to your system and security policies. 
 
= Python =
*Debian:* If Python 2.5 isn't already installed, use the following command to download and install it:

{{{
apt-get install python2.5
}}}

*Windows:* You can download Python [http://python.org/download/ here]. It's not necessary to make any changes to the default values in the wizard. But it useful to change the installation path to your _Program Files_ directory. 
Afterwards, add the python directory to the Windows "Path" environment variable!
The complete Python documentation can be found [http://python.org/doc/ here]. 

= Java =
== Step 01 - Download and Install Binaries ==
*Debian:* SUN Java 6 is currently only available in the unstable version of Debian. First you have to enable non-free packages in the apt configuration file _/etc/apt/sources.list_ in order to install Java using the following command:

{{{
apt-get install sun-java6-bin
}}}
 
The _/etc/apt/sources.list_ file on a debian unstable system may look like this:

{{{
deb http://ftp.de.debian.org/debian/ lenny main non-free
deb-src http://ftp.de.debian.org/debian/ lenny main

deb http://security.debian.org/ lenny/updates main
deb-src http://security.debian.org/ lenny/updates main
}}}

*Windows:* The files for the Java JRE for Windows can be directly downloaded from this [http://www.java.com/en/download/manual.jsp SUN Website]. Select either the online or offline version, download the file and start the installer. If you simply click on next, the installer will put all the java files in the _C:\Programme\Java_ directory.


== Step 02 - Set _JAVA_HOME_ Environment Variable ==
*Debian:* Before you can start the Tomcat Server you have to set the JAVA_HOME environment variable. If you want set _JAVA_HOME_ system wide and if you installed Java 6 to the default directory, then add the following line to the _/etc/profile_ file:

{{{
export JAVA_HOME=/usr/lib/jvm/java-6-sun
}}} 

*Windows:* Control Panel -> System -> Advanced -> Environment Variables -> System Variables -> New


= PostgreSQL =
*Debian:* Use the following command to download and install the binaries:

{{{
apt-get install postgresql-plpython-8.3
}}}

After the setup finished you can use {{{/etc/init.d/pgsql start}}} to start the  DB server and {{{/etc/init.d/pgsql stop}}} to stop the server. Note: Depending on the version of your PostgreSQL package, the name of the script might be {{{postgresql-8.1}}} instead of {{{pgsql}}}

*Windows:*
  # Go to one of the [http://wwwmaster.postgresql.org/download/mirrors-ftp PostgreSQL mirror sites] and download a binary release of at least version 8.3.0 for Win32, e.g. _binary/v8.3.3/win32/postgresql-8.3.3-1.zip_.
  # Extract all the files from the zip archive and open the file _SETUP.bat_.
  # You can install the packages which are selected by default. 
  # The next step is very important. You should install PostgreSQL as a service with a service user. This user is a Windows user account which is named _postgres_ by default. In addition to that you have to set a password, otherwise the installer creates long and secure one for you. The account is used to run and change the configuration of the PostgreSQL service.
  # On the next page you have to set the password for the superuser of the database server, which is also named _postgres_ by default. This user is a PostgreSQL user used to access the actual database. You shouldn't change the other values on this page if you have no compelling reasons.
  # Finally enable PL/Python as procedural language and finish the wizard with the default settings. After the installation completes quit the wizard. It's not necessary to install any other database connectors.
  # If you want to use the PostgreSQL commandline tools directly from every directory, add the PostgreSQL bin directory (default: _`%ProgramFiles%\PostgreSQL\8.3\bin`_) to the environment variable _PATH_. Otherwise just use the _Start->All Programs->PostgreSQL 8.3->Command Prompt_ short cut.

= Apache Tomcat =
*Debian:* Use the following command to download and install the binaries:
{{{
apt-get install tomcat5.5 tomcat5.5-admin
}}}

Before you can access the web front end to administrate the server, you have to create a user in the _/etc/tomcat5.5/tomcat-users.xml_ file. Add the following line to the XML file to create a user named _root_ with the password _1234_ with the privileges to administrate the server and access the manager.

{{{
<tomcat-users>
   ...
   <user username="root" password="1234" roles="admin,manager" />
   ...
</tomcat-users>
}}}  

After that, use {{{/etc/init.d/tomcat5.5 start }}} or {{{/usr/share/tomcat5.5/bin/startup.sh}}} to start the server. The URL of the manager application is _http://hostname:port/manager/html_.

*Windows:* Download Tomcat 6.0 Windows Service Installer from the official [http://tomcat.apache.org/download-60.cgi Apache Website]. Start the installer and select all options except examples as shown in the following screenshot. The next important step is the basic configuration. If the server is used as productive system you should use port 80. Otherwise you can stick with port 8080. After that select an username and password for the server administrator. On the next page you have to select path to your Java JRE. The installer automatically finds the standard version. Make sure that you select Java 6 if you have installed multiple versions of Java on your system. After the setup has completed select start Tomcat and finish the wizard. Now you can begin with the deployment of oryx as shown in Part I.

== Optional: Change Listening Port ==
By default Tomcat listens on port 8180 (Debian) or 8080 (Windows) for incoming requests by default. In order to change the port open the _server.xml_ file which can be found in _/etc/tomcat5.5/_ (Debian) or _`%ProgramFiles%\Apache Software Foundation\Tomcat x.x\conf`_ (Windows).
Look for the following XML element:
{{{
<Connector port="8180" maxHttpHeaderSize="8192" maxThreads="150" minSpareThreads="25" maxSpareThreads="75" enableLookups="false" 
redirectPort="8443" acceptCount="100" connectionTimeout="20000" disableUploadTimeout="true" />
}}}
and change the attribute _port_ to the desired port number. After that you have to restart Tomcat.