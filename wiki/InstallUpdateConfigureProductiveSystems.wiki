#summary This guide gives a quick overview about the default installation, update and configuration processes of the Oryx application.

= WORK IN PROGRESS. THIS IS A NEW ARTICLE AND ITS CONTENT IS STILL INCOMPLETE! =

= Who should read this? =
This guide should be interesting for administrators of Oryx applications, but NOT for developers. All developers and users that want to customize their installation beyond the configuration options explained below may read the [http://code.google.com/p/oryx-editor/wiki/InstallUpdateConfigureProductiveSystems developer guide].

In case you're experiencing any problems, feel free to contact us by mail or join our discussion group.

= Introduction =

The Oryx application can be installed on all systems that support Java, Python 2.5 and PostgreSQL 8.3. We've tested installations successfully on Windows Server 2003 and Debian (Lenny) operating systems. Although it's also possible to use Mac OS X, Windows Vista, Windows XP, Ubuntu and other desktop operating systems we recommend to use server sytems in productive environments.

*Checklist:*
  * [http://www.java.com/ J2SE 5 Java Runtime Environment] or higher
  * [http://tomcat.apache.org/ Apache Tomcat] Version 5.5 or higher
    * Privileges to deploy new web applications using the Tomcat-Manager or privileges to add the war files in _webapps_ directory of Tomcat and restart the Tomcat server.
  * [http://www.postgresql.org/ PostgresSQL] 8.3 or higher (with PLPython)
    * Superuser privileges for the database. 
  * [http://www.python.org/ Python] Version 2.5 (PotgresSQL 8.3 only works with this version)
  * [http://www.oryx-editor.org/downloads Download the latest version of the Oryx application].

You find basic installation instructions for all those applications in the appendix in [http://code.google.com/p/oryx-editor/wiki/Install3rdPartyApplication this guide]

= INSTALLATION =

Unzip the Oryx installation package on your disk. The package contains 2 WAR files and a directory with database scripts.  

= PART I: Setup the Database =
== STEP 1 - Create the _poem_ User ==
The default configuration of Oryx uses a database user called _poem_ without password to connect to the database. If you create the poem user with an empty password, it will not be necessary to make any changes to the configuration file _hibernate.cfg.xml_. But if you want to change the password, you'll find the instructions in PART III. *It is strongly recommended to use a secure password for the poem user. This applies particularly if your PostgreSQL server allows TCP connections from other hosts.*
The _poem_ user may not be a superuser itself. It simply needs owner rights for the poem database. In order to create a new PostgreSQL user open the command shell (Windows: cmd.exe/Debian: bash). Now you need the user name and password from a database superuser to create the poem user. Assuming your superuser is _postgres_ you have to enter the following commands:

{{{
su postgres  # become the postgres user to avoid authentication problems
createuser --username postgres --echo --pwprompt --encrypted poem
exit
}}}

== STEP 2 - Create the _poem_ Database ==
The default name of the Oryx database is _poem_. To create the database named _poem_ from the command shell using the superuser _postgres_ and set the user _poem_ as owner enter the following command:

{{{
createdb --username postgres --echo --encoding utf8 --owner poem poem
}}}

You can use any database name you like, but if you use poem, it will not be necessary to make any changes to the Tomcat configuration. 

== STEP 3 - Deploy the Database Schema ==
The file _database_dump_raw.sql_ in our download package contains all necessary information to initialize the poem database. The schema can also be retrieved from a development system using:

{{{
pg_dump --username postgres --clean --file=db_dump.sql --format=plain poem
}}}

Enter the following command to install the schema:

{{{
psql --username postgres --dbname poem --file db_schema.sql
}}}

This uses the _postgres_ superuser to add the schema from the _db_schema.sql_ file to the _poem_ database. If the sql file isn't in the working directory of the shell, than you have to qualify the full path to the file. 

You can also execute all those commands remotely if the PostgreSQL Database allows remote access. Simply add the option -H _hostname_ to each command.  [http://www.postgresql.org/docs/8.3/interactive/index.html Here] you can find a very detailed documentation of the PostgreSQL Database.   


= PART II: Deploy the WAR Files to Tomcat =
  # Open the Tomcat Manager in your web browser (Default Tomcat configuration: _http://hostname:8180/manager/html_ (Debian) or _http://hostname:8080/manager/html_ (Windows)). *Notice:* The Manager isn't installed by default in all Tomcat distributions and you need a Tomcat user which have the right to access the manager. (--> Appendix B)
  # Then use the _"Warfile to deploy"_ feature of the manager to upload the _oryx.war_ file from the download package. This may take a moment depending on your connection speed to the server. After Tomcat deployed the war file succesfully it prints an OK message on top of the manager.
  # Go on and upload the second war file _backend.war_ .

If you used all the default options from the walkthrough, you won't need to make any changes to the configuration. If not then go on with PART III. The default url of the repository is _http://servername:port/backend/poem/repository_ .

*Notice:* The Oryx-Editor currently needs [http://getfirefox.com the Firefox browser] and if you want to save your models you need an [http://openid.net/ OpenID]. The OpenID login works without further configuration except if your server connects to the internet through an HTTP proxy. In that case, you can change the parameters _proxy-host-name_ and _proxy-port_ in the _web.xml_ file of the backend.


= PART IV: Upgrading an Existing Installation and Creating a Backup = 

*Windows:* 
 # Have a look at [http://hostname:port/manager/html/sessions?path=/backend] if there are any active users. The 'Inactive Time' of a session does NOT imply that the user has stopped modeling since then. It only shows the last time the user accessed the backend, e.g., for storing or loading a model.
 # Use [http://hostname:port/manager/html] to stop the applications 'oryx' and 'backend'
 # To make backup of the current data open a command prompt and go to 'C:\Program Files\PostgreSQL\8.3\bin'. You can also use the link 'Command Prompt' in the PostgreSQL group of the Windows Start Menu. Create a database dump using:
{{{
pg_dump --username postgres --clean --file=YYYY-MM-DD-database-dump.sql" --format=plain poem
}}}
 # Undeploy the applications 'oryx' and 'backend' using [http://hostname:port/manager/html/undeploy?path=/oryx] and [http://hostname:port/manager/html/undeploy?path=/backend]
 # If the 'backend' application is not completely undeployed, restart Tomcat and undeploy it again using: [http://hostname:port/manager/html/undeploy?path=/backend]
 # If the Oryx team released any database migration scripts you can install them using:
{{{
psql --username postgres --dbname poem --file migration-script.sql
}}}
 # Deploy the two web applications _oryx.war_ and _backend.war_ using the Tomcat manager [http://hostname:port/manager/html] as described in _Part II_.
 # If needed, set the HTTP proxy configuration using the parameters _proxy-host-name_ and _proxy-port_ in the _web.xml_ file of the backend and restart Tomcat to make them effective. You can also do that before deployment by unzipping the backend.war, changing the _web.xml_ and zipping it again.



= CONFIGURATION =
Note: You have to deploy the WAR files before you can make any configuration changes. If you redeploy the application (e.g. for an update) all changes will be lost.

== Editor Configuration ==
All configuration files for the editor can be found in the _oryx_ directory of your Tomcat's webapps folder. 

=== Enable or Disable Custom Editor Plug-ins ===
Configuration file: _$(TOMCAT_HOME)/webapps/oryx/*plugins.xml*_

Each plug-in of the editor has a relation xml element in the configuration file. If you like to disable a plug-in, use an xml comment to comment it out
{{{
<!-- Enabled -->
<plugin source="stepThroughPlugin.js" name="ORYX.Plugins.StepThroughPlugin">
	<requires namespace="http://b3mn.org/stencilset/bpmn#"/>
        <requires namespace="http://b3mn.org/stencilset/bpmn1.1#"/>
</plugin>

<!-- Disabled 
<plugin source="stepThroughPlugin.js" name="ORYX.Plugins.StepThroughPlugin">
	<requires namespace="http://b3mn.org/stencilset/bpmn#"/>
        <requires namespace="http://b3mn.org/stencilset/bpmn1.1#"/>
</plugin>
-->
}}}

== Backend Configuration ==
All configuration files for the backend can be found in the _backend_ directory of your Tomcat's webapps folder. 

=== Change Database Server, Name, User and Password ===
Configuration file: _$(TOMCAT_HOME)/webapps/backend/WEB-INF/classes/*hibernate.cfg.xml*_

The Oryx Server uses Hibernate Technology to access the database. Just edit the following xml elements according to your server configuration.

{{{
        <!-- Database connection settings -->
        <property name="connection.driver_class">org.postgresql.Driver</property>
        <property name="connection.url">jdbc:postgresql://server_name/database_name</property>
        <property name="connection.username">user_name</property>
        <property name="connection.password">password</property>
}}}

After you finished editing the file, you have to restart the Tomcat to apply the changes. If your database doesn't run on the same server like the Tomcat, make sure that the database accepts Tcp connections from the Tomcat host.  

=== Add a Custom Stencil Set to the Repository ===
Configuration file: _$(TOMCAT_HOME)/webapps/backend/stencilsets/*stencilsets.json*_

  # Copy the stencil set directory to _$(TOMCAT_HOME)/webapps/backend/stencilsets
  # Add an entry to the configuration file according to the following json example:
{{{
        {
            "title":"BPMN 1.1",
            "namespace":"http://b3mn.org/stencilset/bpmn1.1#",
            "description":"BPMN 1.1 stencil set specification.",
            "uri":"/bpmn1.1/bpmn1.1.json",
            "icon_url":"/bpmn1.1/bpmn1.1.png",
            "visible":true
        }
}}} 

||*Attribute*||*Documentation* ||
|| title || The Title of the stencil set that is shown in the repository ||
|| namespace || Unique namespace of the stencil set.||
|| description || Short textual description. ||
|| uri || The URI of the JSON defintion of the stencil set relative to the __$(TOMCAT_HOME)/webapps/backend/stencilsets_ directory||
|| icon_url || The URL of the icon shown in the repository. ||
|| visible || Boolean (true/false) that controls if the stencil set is available in the new model menu of the repository  ||

=== Remove a Custom Stencil Set to the Repository ===
The best pratice to remove a stencil set is to keep all the files and remove the stencil set from the new model menu of the repository. This is explained above.
If you remove the files and the stencilset.json entry it's not possible to open models based on this stencilset!
== Setup Proxy== 

== ... ==