= DRAFT: THIS PAGE IS STILL UNDER CONSTRUCTION AND INCOMPLETE =
= Introduction =

This walkthrough demonstrates how you deploy the complete Oryx web application including the repository, the editor and the database schema. It is basically designed for the deployment in productive environments. If you want to build your own binaries from source, you may read this article.

= Before You Get Started =
This article focus on the deployment on Windows and Debian operation systems, although it isn't limited to these systems. Before you can deploy the system you need to install an Apache Tomcat and PostgreSQL server. You can find an quick installation guide for both servers in the end of the article. 

*Checklist:*
  * SUN Java 6
  * Apache Tomcat 5.5 (using SUN Java 6)
    * Privileges to deploy new web applications using the Tomcat-Manager or privileges to add the war files in _webapps_ directory of Tomcat and restart the Tomcat server.
  * PostgresSQL 8.3 (with PLPython)
    * Superuser privileges for the database. 
  * Python2.5

= PART I: Configure the Database =
== STEP 1 - Create the _poem_ User ==
The default configuration of Oryx uses a database user called _poem_ with the password _123456_ to connect to the database. If you create the poem user with the default password, it's not necessary to make any changes to the configurations files. But if you want to change the password, you'll find the instructions in PART III. *It's strongly recommended to use a secure password for the poem user instead of the default one. This applies particularly if your PostgreSQL server allows TCP connections from other hosts.*
The _poem_ user may not be a superuser itself. It simply needs owner rights for the poem database. In order to create a new Postgres user open the command shell (Windows: cmd.exe/Debian: bash). Now you need the user name and password from a database superuser to create the poem user. Let's assume your superuser is _postgres_ than enter the following command:

{{{ createuser -U postgres poem }}}

== STEP 2 - Create the _poem_ Database ==
The default name of the Oryx database is _poem_. To create the database named _poem_ from the command shell using the superuser _postgres_ and set the user _poem_ as owner enter the following command:

{{{ createdb -U postgres -O poem poem }}}

You can use any database name you like, but if you use poem, it's not necessary to make any changes to the Tomcat configuration. 

== STEP 3 - Deploy the Database Schema ==
The the file _oryx_db_schema.sql_ in our download package contains all necessary information to initialize the poem database. Enter the following command to install the schema:

{{{ psql -U postgres -d poem -f  oryx_db_schema.sql}}}

This uses the _postgres_ superuser to add the schema from the _oryx_db_schema.sql_ file to the _poem_ database. If the sql file isn't in the working directory of the shell, than you have to qualify the full path to the file. 

You can also execute all those commands remotely if the PostgreSQL Database allows remote access. Simply add the option -H _hostname_ to each command.  [http://www.postgresql.org/docs/8.3/interactive/index.html Here] you can find a very detailed documentation of the PostgreSQL Database.   


= PART II: Deploy the WAR Files on the Tomcat =
Open the Tomcat Manager in your web browser (Default Tomcat configuration: _http://servername:8180/manager/html_) Notice: The Manager isn't installed by default in all Tomcat distributions and you need an Tomcat user which have the right to access the manager. (--> Appendix B) 
First scroll down to the end of the manager page an make sure that the JVM-Version starts with _1.6_. Then use the _"Warfile to deploy"_ feature of the manager to upload the _oryx.war_ file from the download package. This may take a moment depending on your connection speed to the server. After Tomcat deployed the war file succesfully it prints an OK message on top of the manager. Go on and upload the second war file _backend.war_ .
If you used all the default options from the walkthrough, you won't need to make any changes to the configuration. If not then go on with PART III. The default url of the repository is _http://servername/backend/poem/repository_ .
Notice: The Oryx-Editor currently needs the Firefox browser and if you want to save your models you need an OpenID. The OpenID login works without further configuration.  

= PART III: Configuration = 



*Notice:* The following quick start guides demonstrate, how to install the software packages using the default configuration. You may have to customize the given examples according to your system and security policies. 
 
= Appendix A: Install Python =
*Windows:* You can download Python [http://python.org/download/ here]. I used the Windows Installer and didn't made any changes to the default values in the wizard. The complete Python documentation can be found [http://python.org/doc/ here]. 


= Appendix B: Install SUN Java 6 =
== Step 01 - Download and Install Binaries ==
*Debian:* SUN Java 6 is currently only available in the unstable version of Debian. You have to enable non-free packages in the apt configuration file first in order to install Java using the following command:
{{{ apt-get install sun-java6-bin }}} 
The _/etc/apt/sources.list_ file on a debian unstable system may look like this:
{{{
deb http://ftp.de.debian.org/debian/ lenny main non-free
deb-src http://ftp.de.debian.org/debian/ lenny main

deb http://security.debian.org/ lenny/updates main
deb-src http://security.debian.org/ lenny/updates main
}}}

== Step 02 - Set _JAVA_HOME_ Environment Variable ==
*Debian:* Before you can start the Tomcat Server you have to set the JAVA_HOME environment variable. If you want set _JAVA_HOME_ system wide and if you installed Java 6 to the default directory, then add the following line to the _/etc/profile_ file:
{{{ export JAVA_HOME=/usr/lib/jvm/java-6-sun }}} 

*Windows:*

== Step 03 (optional) - Change Listening Port ==
Tomcat listens on port 8180 for incoming requests by default. In order to change the port open the _ /etc/tomcat5.5/server.xml_ file, go to the following line
{{{
<Connector *port="8180"* maxHttpHeaderSize="8192" maxThreads="150" minSpareThreads="25" maxSpareThreads="75" enableLookups="false" 
redirectPort="8443" acceptCount="100" connectionTimeout="20000" disableUploadTimeout="true" />
}}}
and change the xml port attribute to any port you like. 
= Appendix C - Install and Configure Apache Tomcat =

= Appendix D - Install and Configure PostgreSQL =