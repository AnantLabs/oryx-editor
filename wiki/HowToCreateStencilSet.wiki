#summary How to create a stencil set for oryx by the example of Let's Dance

= Introduction =

A typical stencil set consists of a JSON file and several SVG files, as well as several 
picture files. The JSON file contains the stencil set description, e.g. a definition 
of every stencil.

For each stencil in a stencil set one SVG file that contains the graphical representation of the stencil and one picture file that is used 
as an icon for that stencil is required.

These files are stored in a specific folder structure like the 

	letsdance
	   |- letsdance.json
	   |- icons 
	   |- view

= Creating Graphical Representation =

The first step create the SVG files for the graphical representation of the Let's dance" modeling language and store them in the view folder.

When using oryx elements and attributes in a SVG document, you have to set a prefix. In this example the prefix "oryx" is used.

{{{
<svg
   xmlns="http://www.w3.org/2000/svg"
   xmlns:oryx="http://www.b3mn.org/oryx"
   version="1.1">
	...
</svg>
}}}

To start modeling, a kind of background paper is needed. On it you can place interaction and relationship objects. 
The file node.diagram.svg only consists of a square with a stroke and fill color. It is done by adding a "rect" element to the "g" element:

{{{
{
	"title":"Let's Dance",
	"namespace":"http://b3mn.org/stencilset/letsdance#",
	"description":"Simple stencil set for Let's Dance diagrams.",
	 "stencils": [/*..*/],
	 "rules":{*/..*/}
}
}}}

The description of the head node is added just by insertion of a new node element into the stencils section.

{{{
{
	"title":"Let's Dance",
	"namespace":"http://b3mn.org/stencilset/letsdance#",
	"description":"Simple stencil set for Let's Dance diagrams.",
	 "stencils": [
		{
			"type":		"node",
			"id":			"Diagram",
			"title":		"Diagram",	
			"groups":		["Diagram"],
			"description":	"A Let’s Dance Diagram",
			"view":		"node.diagram.svg",
			"icon":		"diagram.png",
			"roles":		[]
		   }
	],
	 "rules":{*/..*/}
}
}}}

Finally you have to edit the editor.xhtml. There it is necessary to tell oryx to use the Let’s Dance stencil set.

First add a reference to the JSON file. For example like this:

{{{
<meta name="oryx.type" content="http://b3mn.org/stencilset/letsdance#Diagram" />
}}}

When open the editor.xhtml in Firefox, you should see a blank diagram background.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/001_firstdiagram.PNG

Now it is the task to define the SVG files for the elements, which can put on this background diagram. Oryx decide between edges and Nodes.

A Node can be resized, text can be attached, colors and opacities can be changed and parts of the node can be hidden. Except resizing, these abilities are not only specified in the SVG document of a node, but you have to prepare the SVG representation for that.

Edges are lines of different forms with decorations attached to it (for example arrowheads). In Oryx, edges should also have the possibility to be divided into sections and to control the sections separately. This makes it possible to draw not only straight edges, but also edges with corners.

The very simple constructed language “Let’s Dance” basically offers two types of nodes and tree types of edges.

The simple interaction node basically consists in each case of a path on right respectively left side for receiver and sender. Also a rectangle is put below them.  
Then add text to label sender, receiver and the message type. If you assign an unique id to each element in the same SVG file, you latter can change their attributes over the property panel inside the oryx-editor. The stencil is completed by adding magnets on each side of the stencil. With magnets you can define special points on a node where you can dock other nodes or edges to connect them.

{{{
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:oryx="http://www.b3mn.org/oryx"
   version="1.0">
  <oryx:magnets>
  	<oryx:magnet oryx:cx="75" oryx:cy="0" oryx:default="yes"/>
  	<oryx:magnet oryx:cx="75" oryx:cy="75"/>
  	<oryx:magnet oryx:cx="0" oryx:cy="36"/>
  	<oryx:magnet oryx:cx="150" oryx:cy="36"/>
  </oryx:magnets>
  <g>
    <path
       id="receiver"
       oryx:anchor="top bottom left right"
       oryx:resize="vertical horizontal"
       d="M60 0 L150 0 L150 50 L60 50 L75 25 z"
       stroke="black" fill="none" stroke-width="2" />
    <path
       id="sender"
       oryx:anchor="top bottom left right"
       oryx:resize="vertical horizontal"
       d="M0 0 L60 0 L75 25 L60 50 L0 50 z"
       stroke="black" fill="none" stroke-width="2" />
    <rect
       id="descriptionline"
       oryx:anchor="top bottom left right"
       oryx:resize="vertical horizontal"
       width="150" height="25"
       x="0" y="50"
       stroke="black" fill="none"/>
	<text id="messageType" x="75" y="60" oryx:align="middle center"></text>		
	<text id="senderText" x="4" y="28" oryx:algin="middle center"></text>
	<text id="receiverText" x="80" y="28" oryx:algin="middle center"></text>	
  </g>
</svg>
}}}

The specification of a complex interaction is even easier. It consist of big rectangle and a smaller one with a text inside for possible guard conditions.

{{{
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:oryx="http://www.b3mn.org/oryx"
   version="1.0">
  <oryx:magnets>
  	<oryx:magnet oryx:cx="150" oryx:cy="0" oryx:default="yes"/>
  	<oryx:magnet oryx:cx="150" oryx:cy="150"/>
  	<oryx:magnet oryx:cx="300" oryx:cy="75"/>
  	<oryx:magnet oryx:cx="0" oryx:cy="75"/>
  </oryx:magnets>
  <g>
    <rect
       id="border"
       oryx:anchor="top bottom left right"
       oryx:resize="vertical horizontal"
       width="300"
       height="150"
       x="0" y="0"
       stroke="black" fill="white" stroke-width="2" /> 
    <rect
       id="guardConditionBorder"
       oryx:anchor="top bottom left right"
       oryx:resize="vertical horizontal"
       width="300"
       height="25"
       x="0" y="-25"
       stroke="black" fill="white" stroke-width="2" />   
    <text id="guardConditionText" x="150" y="-12" oryx:align="middle center"></text> 
  </g>
</svg>
}}}

Furthermore you have to add the description in the JSON file for both types of interaction, like you did before for the top diagram.

{{{
{
			"type":		"node",
			"id":			"complexInteraction",
			"title":		"ComplexInteraction",	
			"groups":		["Interaction"],
			"description":	"Representation of a complex Interaction in Let's Dance",
			"view":		"node.complexinteraction.svg",
			"icon":		"node.complexinteraction.png",
			"roles":		["interaction"]
},
{
			"type":			"node",
			"id":			"simpleInteraction",
			"title":		"simpleInteraction",	
			"groups":		["Interaction"],
			"description":	"",
			"view":			"node.simpleinteraction.svg",
			"icon":			"simpleinteraction.png",
			"roles":		["interaction"]
}
}}}

But if you now try to drag & drop a new interaction on your diagram, oryx will permit this. The reason is a semantic control in the oryx-editor. At least you have to define which element can contain an other element and which ones can connect to each other.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/002_interaction_no_rules.png

So insert some in the rules section. The attributes of the rules section are arrays. They again hold the specified rules for connection or containment for example. In our Let’s Dance example add the following rules.

{{{
"rules":{
		"containmentRules":	[
			{
				"role":		"Diagram",
				"contains": [
					"interaction"
				]
			},
			{
				"role":		"complexInteraction",
				"contains": [
					"interaction"
				]
			}
		]
		
	}
}}}

Remember that we earlier added the role “interaction” to simple- and complexinteraction. It can now be used to specify the containment rule. Generally it is possible to address an element either over its id or roles.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/003_interaction_containmentrules.png

In the SVG graphics we added some empty text fields. Now we want to use them to label the Let’s Dance interaction elements over the properties panel. To start with the complex interaction is rather easy. There is only the guard condition: text can type in it and a Boolean signals, whether this part is visible or not. Properties have to be specified for each edge or node separately. It is just another attribute to the stencil, but each property has a unique id within a stencil.

{{{
…
{
			"type":		"node",
			"id":			"complexInteraction",
			"title":		"ComplexInteraction",	
			"groups":		["Interaction"],
			"description":	"Representation of a complex Interaction in Let's Dance",
			"view":		"node.complexinteraction.svg",
			"icon":		"node.complexinteraction.png",
			"roles":		["interaction"],
			"properties": [
				{
					"id":"guardCondition",
					"type":"String",
					"title":"Guard Condition",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"length":"",
					"refToView":"guardConditionText",
					"wrapLines":false
				},
				{
					"id":"showGuardCondition",
					"type":"Boolean",
					"title":"Show Condition",
					"value": false,
					"description":"",
					"optional":false,
					"refToView": [
						"guardConditionText",
						"guardConditionBorder"
					]
				},
			]
		},
…
}}}

The 'refToView' attribute specifies an id as string or an array of ids of SVG elements
in the graphical representation of a stencil. If this attribute is set, the property
will manipulate the graphical representation at run-time, e. g. changing the color or
rendering text. Dependant on the property's type you can reference different types
of SVG elements.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/004_guardcondition_false.png

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/005_guardcondition_true.png

And now insert the properties for the simple interaction.

{{{
{
			"type":			"node",
			"id":			"simpleInteraction",
			"title":		"simpleInteraction",	
			"groups":		["Interaction"],
			"description":	"",
			"view":			"node.simpleinteraction.svg",
			"icon":			"simpleinteraction.png",
			"roles":		["interaction"],
			"properties": [
				{
					"id":"messageType",
					"type":"String",
					"title":"Message Type",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"length":"",
					"refToView":"messageType",
					"wrapLines":false
				},
				{
					"id":"senderText",
					"type":"String",
					"title":"Sender Text",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"length":"",
					"refToView":"senderText",
					"wrapLines":false
				},
				{
					"id":"receiverText",
					"type":"String",
					"title":"Receiver Text",
					"value":" ",
					"description":"",
					"readonly":false,
					"optional":true,
					"length":"",
					"refToView":"receiverText",
					"wrapLines":false
				},
				{
					"id":			"senderColor",
					"type":			"Color",
					"title":		"Sender Color",
					"value":		"#ffffff",
					"description":	"",
					"readonly":		false,
					"optional":		true,
					"refToView":	"sender",
					"fill":			true,
					"stroke":		false
				},
				{
					"id":"receiverColor",
					"type":"Color",
					"title":"Receiver Color",
					"value":		"#ffffff",
					"description":"",
					"readonly":false,
					"optional":true,
					"refToView":"receiver",
					"fill":true,
					"stroke":false
				}
			]
}
}}}

In this case we also implement the capability to change the color of the sender and receiver part within the SVG representation. Therefore define the property type Color, access to the desired element over “refToView” and last define, if you want to change the color of the fill or stroke or maybe both.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/006_colorchange1.png

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/007_colorchange2.png

In the last step we have to realize some control flow. It is done by drawing some arrows and declaring them as “edge” in the description file.

The “precedes” element only consists of a black line and the arrow at the end is realized by markers.

{{{
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns="http://www.w3.org/2000/svg"
   xmlns:oryx="http://www.b3mn.org/oryx"
   version="1.1">
   <defs> 
		<marker id="arrowEnd" refX="10" refY="5" markerUnits="userSpaceOnUse" 
			markerWidth="10" markerHeight="10" orient="auto"> 
			<path d="M 0 0 L 10 5 L 0 10 z" fill="black" stroke="black"/> 
		</marker> 
	</defs> 
   <g>
   	<path d="M50 50 L100 50" stroke="black" fill="none" 
		stroke-width="2" marker-end="url(#arrowEnd)"/> 
		
   </g>
</svg>
In comparison to the “precedes” the “weakprecedes” element has just a dashed line shape. The stroke-dasharray="3, 4" attribute produces this effect.  
The inhibit edge uses a second marker for the vertical stroke at the starting.
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns="http://www.w3.org/2000/svg"
   xmlns:oryx="http://www.b3mn.org/oryx"
   version="1.1">
   <defs> 
		<marker id="arrowEnd" refX="10" refY="5" markerUnits="userSpaceOnUse" 
			markerWidth="10" markerHeight="10" orient="auto"> 
			<path d="M 0 0 L 10 5 L 0 10 z" fill="black" stroke="black"/> 
		</marker> 
		<marker id="inhibitStroke" refX="-10" refY="5" markerUnits="userSpaceOnUse" 
			markerWidth="2" markerHeight="10" orient="auto"> 
			<path d="M 0 0 L0 10 z" fill="none" stroke="black" stroke-width="4"/> 
		</marker> 
	</defs> 
   <g>
   	<path d="M50 50 L100 50" stroke="black" fill="none" 
		stroke-width="2" marker-end="url(#arrowEnd)" marker-start="url(#inhibitStroke)" /> 
		
   </g>
</svg>
}}}

Now add them to the description file of the Let’s Dance stencil set.

{{{
                {
			"type":			"edge",
			"id":			"Precedes",
			"title":		"Precedes",	
			"groups":		["Relationship"],
			"description":	"A precedes edges",
			"view":			"edge.precedes.svg",
			"icon":			"precedes.png",
			"roles":		["controlflow"]
		},
		{
			"type":			"edge",
			"id":			"Inhibits",
			"title":		"Inhibits",	
			"groups":		["Relationship"],
			"description":	"An inhibits edges",
			"view":			"edge.inhibits.svg",
			"icon":			"edge.inhibits.png",
			"roles":		["controlflow"]
		},
		{
			"type":			"edge",
			"id":			"WeakPrecedes",
			"title":		"WeakPrecedes",	
			"groups":		["Relationship"],
			"description":	"A weak precedes edges",
			"view":			"edge.weakprecedes.svg",
			"icon":			"edge.weakprecedes.png",
			"roles":		["controlflow"]
		}

}}}

They are from type edge and to collect them in a own group in Oryx’s shape repository just set the value of the attribute groups to “Relationship” for instance. 

Only the connection rules are left in the rules section. Add them through:

{{{
"rules":{
		"connectionRules": [
			{
				"role": 	"controlflow",
				"connects": [
					{
						"from": "interaction",
						"to":	"interaction"
					}
				],
			}
		],
		"containmentRules":	[
			{
				"role":		"Diagram",
				"contains": [
							"interaction"
				]
			},
			{
				"role":		"complexInteraction",
				"contains": [
							"interaction"
				]
			}
		]
		
	}
}}}

In each edge the role controlflow is defined, so that we can specify, that an edge connects two interactions of any type.

Now look at the border of an interaction while crossing it with the end of an edge – the magnets come out from behind and you dock to them.

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/008_magnets.png

http://oryx-editor.googlecode.com/svn/wiki/pictures_letsdance/009_hover_buttons.png

The complete implementation of the Let's Dance modeling language is available over the oryx-editor svn. It contains all shapes and descriptions. 

We wish you much success!