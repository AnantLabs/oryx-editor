/** * Copyright (c) 2008 * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if (!ORYX.Plugins)     ORYX.Plugins = new Object();ORYX.Plugins.DesynchronizabilityOverlay = Clazz.extend({    facade: undefined,        construct: function(facade){		        this.facade = facade;        		this.active = false;		this.el 	= undefined;		this.callback = undefined;		        this.facade.offer({            'name': "Overlay Test",            'functionality': this.showOverlay.bind(this),            'group': "Overlay",            'icon': ORYX.PATH + "images/bpmn2pn.png",            'description': "Overlay Test",            'index': 1,            'minShape': 0,            'maxShape': 0        });		    },    	showOverlay: function(){		if (this.active) {						this.facade.raiseEvent({				type: 	"overlay.hide",				id: 	"overlaytest.red"			});			this.facade.raiseEvent({				type: 	"overlay.hide",				id: 	"overlaytest.green"			});								} else {						// Force to set all resource IDs			DataManager.serializeDOM( this.facade );			// Get all Resource IDs from Element			var resourceIDs ='{"valid":["resource0","resource2"],"invalid":["resource1","resource3"]}'.evalJSON();			// Get all Valid ResourceIDs and collect all shapes			var greens = resourceIDs.valid.collect(function(res){ return this.facade.getCanvas().getChildShapeByResourceId( res ) }.bind(this)).compact();			// Get all Invalid ResourceIDs and collect all shapes			var reds = resourceIDs.invalid.collect(function(res){ return this.facade.getCanvas().getChildShapeByResourceId( res ) }.bind(this)).compact();											this.facade.raiseEvent({				type: 			"overlay.show",				id: 			"overlaytest.green",				shapes: 		greens,				attributes: 	{fill: "green"}			});						this.facade.raiseEvent({				type: 			"overlay.show",				id: 			"overlaytest.red",				shapes: 		reds,				attributes: 	{fill: "red"}			});									}				this.active = !this.active;							}	    });