/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **//** * @namespace Oryx name space for plugins * @name ORYX.Plugins*/if(!ORYX.Plugins)	ORYX.Plugins = new Object();/** * The view plugin offers all of zooming functionality accessible over the  * tool bar. This are zoom in, zoom out, zoom to standard, zoom fit to model. *  * @class ORYX.Plugins.View * @extends Clazz * @param {Object} facade The editor facade for plugins.*/ORYX.Plugins.View = {	/** @lends ORYX.Plugins.View.prototype */	facade: undefined,	construct: function(facade) {		this.facade = facade;		this.zoomLevel = 1.0;		this.minZoomLevel = 0.21;		this.maxZoomLevel = 2.50;				/* Register zoom in */		this.facade.offer({			'name':ORYX.I18N.View.zoomIn,			'functionality': this.zoom.bind(this, [1.0 + ORYX.CONFIG.ZOOM_OFFSET]),			'group': ORYX.I18N.View.group,			'icon': ORYX.PATH + "images/magnifier_zoom_in.png",			'description': ORYX.I18N.View.zoomInDesc,			'index': 1,			'minShape': 0,			'maxShape': 0,			'isEnabled': function(){return this.zoomLevel < this.maxZoomLevel }.bind(this)});				/* Register zoom out */		this.facade.offer({			'name':ORYX.I18N.View.zoomOut,			'functionality': this.zoom.bind(this, [1.0 - ORYX.CONFIG.ZOOM_OFFSET]),			'group': ORYX.I18N.View.group,			'icon': ORYX.PATH + "images/magnifier_zoom_out.png",			'description': ORYX.I18N.View.zoomOutDesc,			'index': 2,			'minShape': 0,			'maxShape': 0,			'isEnabled': function(){ return this.zoomLevel > this.minZoomLevel }.bind(this)});				/* Register zoom standard */		this.facade.offer({			'name':ORYX.I18N.View.zoomStandard,			'functionality': this.setAFixZoomLevel.bind(this, 1),			'group': ORYX.I18N.View.group,			'icon': ORYX.PATH + "images/zoom_standard.png",			'description': ORYX.I18N.View.zoomStandardDesc,			'index': 3,			'minShape': 0,			'maxShape': 0,			'isEnabled': function(){return this.zoomLevel != 1}.bind(this)		});				/* Register zoom fit to model */		this.facade.offer({			'name':ORYX.I18N.View.zoomFitToModel,			'functionality': this.zoomFitToModel.bind(this),			'group': ORYX.I18N.View.group,			'icon': ORYX.PATH + "images/image.png",			'description': ORYX.I18N.View.zoomFitToModelDesc,			'index': 4,			'minShape': 0,			'maxShape': 0		});	},		/**	 * It sets the zoom level to a fix value and call the zooming function.	 * 	 * @param {Number} zoomLevel	 * 			the zoom level	 */	setAFixZoomLevel : function(zoomLevel) {		this.zoomLevel = zoomLevel;		this._checkZoomLevelRange();		this.zoom(1);	},		/**	 * It does the actual zooming. It changes the viewable size of the canvas 	 * and all to its child elements.	 * 	 * @param {Number} factor	 * 		the factor to adjust the zoom level	 */	zoom: function(factor) {		// TODO: Zoomen auf allen Objekten im SVG-DOM		this.zoomLevel *= factor;				var canvas = this.facade.getCanvas();					var newWidth 	= canvas.bounds.width()  * this.zoomLevel;		var newHeight 	= canvas.bounds.height() * this.zoomLevel;				/* Set new top offset */		var offsetTop = (canvas.node.parentNode.parentNode.parentNode.offsetHeight - newHeight) / 2.0;				offsetTop = offsetTop > 20 ? offsetTop - 20 : 0;		canvas.node.parentNode.parentNode.style.marginTop = offsetTop + "px";		offsetTop += 5;		canvas.getHTMLContainer().style.top = offsetTop + "px";				/* Set new Zoom-Level */		canvas.setSize({width: newWidth, height: newHeight}, true);				/* Set Scale-Factor */		canvas.node.setAttributeNS(null, "transform", "scale(" +this.zoomLevel+ ")");				/* Refresh the Selection */		this.facade.updateSelection();	},			/**	 * It calculates the zoom level to fit whole model into the visible area	 * of the canvas. Than the model gets zoomed and the position of the 	 * scroll bars are adjusted.	 * 	 */	zoomFitToModel: function() {				/* Get the size of the visible area of the canvas */		var scrollNode 	= this.facade.getCanvas().getHTMLContainer().parentNode.parentNode;		var visibleHeight = scrollNode.getHeight() - 30;		var visibleWidth = scrollNode.getWidth() - 30;				var nodes = this.facade.getCanvas().getChildNodes();				if(!nodes || nodes.length < 1) {			return false;					}					/* Calculate size of canvas to fit the model */		var bounds = nodes[0].absoluteBounds().clone();		nodes.each(function(node) {			bounds.include(node.absoluteBounds().clone());		});						/* Set new Zoom Level */		var scaleFactorWidth =  visibleWidth / bounds.width();		var scaleFactorHeight = visibleHeight / bounds.height();				/* Choose the smaller zoom level to fit the whole model */		var zoomFactor = scaleFactorHeight < scaleFactorWidth ? scaleFactorHeight : scaleFactorWidth;				/* Do zooming */		this.setAFixZoomLevel(zoomFactor);				/* Set scroll bar position */		scrollNode.scrollTop = Math.round(bounds.upperLeft().y * this.zoomLevel) - 5;		scrollNode.scrollLeft = Math.round(bounds.upperLeft().x * this.zoomLevel) - 5;			},		/**	 * It checks if the zoom level is included in the definined zoom	 * level range.	 * 	 * @private	 */	_checkZoomLevelRange: function() {				if(this.zoomLevel < this.minZoomLevel) {			this.zoomLevel = this.minZoomLevel;					}				if(this.zoomLevel > this.maxZoomLevel) {			this.zoomLevel = this.maxZoomLevel;					}	}};ORYX.Plugins.View = Clazz.extend(ORYX.Plugins.View);