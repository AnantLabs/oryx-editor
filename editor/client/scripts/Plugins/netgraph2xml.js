/** * Copyright (c) 2012 * Philipp Berger * * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if(!ORYX.Plugins)	ORYX.Plugins = new Object();ORYX.Plugins.NETGRAPH2XML = ORYX.Plugins.AbstractPlugin.extend({		construct: function() {		arguments.callee.$.construct.apply(this, arguments);			this.facade.offer({			'name'				: ORYX.I18N.NETGRAPH2XML.importName,			'functionality'		: this.importXML.bind(this),			'group'				: 'Netgraph',			'icon'				: ORYX.PATH + "images/import.png",			'description'		: 'Load from XML',			'index'				: 1,			'minShape'			: 0,			'maxShape'			: 0});				this.facade.offer({			'name'				: "Export to SLG",			'functionality'		: this.transformToSLG.bind(this),			'group'				: 'Netgraph',			'icon'				: ORYX.PATH + "images/disk.png",			'description'		: "Save to SLG",			'index'				: 2,			'minShape'			: 0,			'maxShape'			: 0});				this.facade.offer({			'name'				: ORYX.I18N.NETGRAPH2XML.exportName,			'functionality'		: this.transform.bind(this),			'group'				: 'Netgraph',			'icon'				: ORYX.PATH + "images/export2.png",			'description'		: 'Export to XML',			'index'				: 3,			'minShape'			: 0,			'maxShape'			: 0});			/*this.facade.offer({			name:"Layout",			functionality: function(){				try {					this.layout();				}				catch(e) {						Ext.Msg.alert('Layout', 'Layouting aborted, due to internal error'); 						ORYX.Log.error(e);									}			}.bind(this),			group: "netgraph",			icon: ORYX.PATH + "images/auto_layout.png",			description: "Layout Netgraph",			index: -9,			minShape: 0,			maxShape: 0});*/		window.importOryxXml = function( xpdlString ){			window.setTimeout(function(){				Ext.Ajax.request({					url: ORYX.CONFIG.NETGRAPH2XMLPATH,					method: 'POST',					success: function(request){						this.facade.importJSON(request.responseText); 						try {							this.layout();						}						catch(e) {								Ext.Msg.alert('Layout', 'Layouting aborted, due to internal error'); 								ORYX.Log.error(e);													}					}.bind(this),					failure: function() {						Ext.Msg.alert("Import failed");						},					params: {data: xpdlString,							 action: "Import"}				});																	}.bind(this), 100);		}.bind(this);	},	transform: function() {		var url = ORYX.CONFIG.NETGRAPH2XMLPATH;		var json = this.facade.getSerializedJSON();				Ext.Ajax.request({			url: url,			method: 'POST',			success: function(request) {				this.openDownloadWindow(window.document.title + ".xml", request.responseText);				}.bind(this),			failure: function() {Ext.Msg.alert("Conversion failed");},			params: {data: json,					 action: "Export"}		})	},	transformToSLG: function() {		var url = ORYX.CONFIG.NETGRAPH2XMLPATH;		var json = this.facade.getSerializedJSON();				Ext.Ajax.request({			url: url,			method: 'POST',			success: function(request) {				parent.document.getElementById('scenarioXml').value=request.responseText;				parent.document.getElementById('_eventId_next').click();								}.bind(this),			failure: function() {Ext.Msg.alert("Conversion failed");},			params: {data: json,					 action: "Export"}		})	},	layout: function(){		// storage for move commands		var commands = [];		var coords = {};		coords.x=0;		coords.y=0;		coords.maxY = 0;		this.facade.getCanvas().getChildNodes(false).each(function(shape){			this.layoutContainer(shape);			commands.push(new ORYX.Core.Command.Move(					[shape], 					{						x: coords.x,						y: coords.y					}, 					null, //this.containmentParentNode, 					null, //this.currentShapes, 					this				));						coords.x += shape.bounds.width() + 40			coords.maxY = Math.max(coords.maxY, shape.bounds.height());			if(coords.x>1000){				coords.y += coords.maxY + 40;				coords.maxY = 0;				coords.x=0;			}					}.bind(this));		this.facade.executeCommands(commands);	},	layoutContainer: function(shapeC){		// storage for move commands		var commands = [];				var coords = {};		coords.x=20;		coords.y=20;		coords.maxY = 0;		shapeC.getChildNodes(false).each(function(shape){			this.layoutContainer(shape);			commands.push(new ORYX.Core.Command.Move(					[shape], 					{						x: coords.x,						y: coords.y					}, 					null, //this.containmentParentNode, 					null, //this.currentShapes, 					this				));			coords.x += shape.bounds.width() + 40			coords.maxY = Math.max(coords.maxY, shape.bounds.height());			if(coords.x>320){				coords.y += coords.maxY + 40;				coords.maxY = 0;				coords.x = 20;			}		}.bind(this));		this.facade.executeCommands(commands);		shapeC.getChildShapes(false).each(function(shape){				shapeC.bounds.set(					Math.min(shape.bounds.upperLeft().x, shapeC.bounds.upperLeft().x), 					Math.min(shape.bounds.upperLeft().y, shapeC.bounds.upperLeft().y),					Math.max(shape.bounds.lowerRight().x, shapeC.bounds.lowerRight().x)+20,					Math.max(shape.bounds.lowerRight().y, shapeC.bounds.lowerRight().y)+20				);		}.bind(this));		this.facade.getCanvas().update();	},	importXML: function( successCallback ){		var url = ORYX.CONFIG.NETGRAPH2XMLPATH;	    var form = new Ext.form.FormPanel({			baseCls: 		'x-plain',	        labelWidth: 	50,	        defaultType: 	'textfield',	        items: [{	            text : 		ORYX.I18N.NETGRAPH2XML.selectFile, 				style : 	'font-size:12px;margin-bottom:10px;display:block;',	            anchor:		'100%',				xtype : 	'label' 	        },{	            fieldLabel: ORYX.I18N.NETGRAPH2XML.file,	            name: 		'subject',				inputType : 'file',				style : 	'margin-bottom:10px;display:block;',				itemCls :	'ext_specific_window_overflow'	        }, {	            xtype: 'textarea',	            hideLabel: true,	            name: 'msg',	            anchor: '100% -63'  	        }]	    });		// Create the panel		var dialog = new Ext.Window({ 			autoCreate: true, 			layout: 	'fit',			plain:		true,			bodyStyle: 	'padding:5px;',			title: 		ORYX.I18N.NETGRAPH2XML.impXPDL, 			height: 	350, 			width:		500,			modal:		true,			fixedcenter:true, 			shadow:		true, 			proxyDrag: 	true,			resizable:	true,			items: 		[form],			buttons:[				{					text:ORYX.I18N.NETGRAPH2XML.impBtn,					handler:function(){												var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:ORYX.I18N.NETGRAPH2XML.impProgress});						loadMask.show();												window.setTimeout(function(){																			var xpdlString =  form.items.items[2].getValue();							Ext.Ajax.request({								url: url,								method: 'POST',								success: function(request){									this.facade.importJSON(request.responseText); 									try {										this.layout();									}									catch(e) {											Ext.Msg.alert('Layout', 'Layouting aborted, due to internal error'); 											ORYX.Log.error(e);																			}									dialog.hide();									loadMask.hide();									}.bind(this),								failure: function() {loadMask.hide(); Ext.Msg.alert("Import failed");},								params: {data: xpdlString,										 action: "Import"}							});																							}.bind(this), 100);								}.bind(this)				},{					text:ORYX.I18N.NETGRAPH2XML.close,					handler:function(){												dialog.hide();										}.bind(this)				}			]		});				// Destroy the panel when hiding		dialog.on('hide', function(){			dialog.destroy(true);			delete dialog;		});		// Show the panel		dialog.show();										// Adds the change event handler to 		form.items.items[1].getEl().dom.addEventListener('change',function(evt){				if (window.File && window.FileReader && window.FileList && window.Blob) {					// Great success! All the File APIs are supported.				} else {					Ext.Msg.alert('File API not found',								'The File APIs are not fully supported in this browser.\n' + 									'No file selection possible.');										return;				}		        var files = evt.target.files;		        var file = files[0];           		        var reader = new FileReader();		        reader.onload = function() {		        	form.items.items[2].setValue(this.result);            		        }		        reader.readAsText(file)			}.bind(this), true)	}});