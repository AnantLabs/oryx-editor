/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if(!ORYX.Plugins) {	ORYX.Plugins = new Object();}ORYX.Plugins.Toolbar = {	facade: undefined,	construct: function(facade, ownPluginData) {		this.facade = facade;				this.groupIndex = new Hash();		ownPluginData.properties.each((function(value){			if(value.group && value.index != undefined) {				this.groupIndex[value.group] = value.index			}		}).bind(this));				Ext.QuickTips.init();		this.buttons = [];	},	registryChanged: function(pluginsData) {        // Sort plugins by group and index		var plugs =  pluginsData.sortBy((function(value) {			return ((this.groupIndex[value.group] != undefined ? this.groupIndex[value.group] : "" ) + value.group + "" + value.index).toLowerCase();		}).bind(this));				this.buttons = [];		ORYX.Log.trace("Creating a toolbar.")		var toolbar = new Ext.Toolbar({			height: 24		});				var currentGroupsName = plugs[0].group;                // Map used to store all drop down buttons of current group        var currentGroupsDropDownButton = {};		var region = this.facade.addToRegion("north", toolbar, "Toolbar");				plugs.each((function(value) {            // Add seperator if new group begins			if(currentGroupsName != value.group) {			    toolbar.add('-');				currentGroupsName = value.group;                currentGroupsDropDownButton = {};			}                        // If an drop down group icon is provided, a split button should be used            if(value.dropDownGroupIcon){                var splitButton = currentGroupsDropDownButton[value.dropDownGroupIcon];                                // Create a new split button if this is the first plugin using it                 if(splitButton === undefined){                    splitButton = currentGroupsDropDownButton[value.dropDownGroupIcon] = new Ext.Toolbar.SplitButton({                        cls: "x-btn-icon", //show icon only                        icon: value.dropDownGroupIcon,                        menu: new Ext.menu.Menu({                            items: [] // items are added later on                        }),                        listeners: {                          click: function(button, event){                            // The "normal" button should behave like the arrow button                            if(!button.menu.isVisible() && !button.ignoreNextClick){                                button.showMenu();                            } else {                                button.hideMenu();                            }                          }                         }                    });                                        toolbar.add(splitButton);                }                                // General config button which will be used either to create a normal button                // or a check button (if toggling is enabled)                var buttonCfg = {                    icon: value.icon,                    text: value.name,                    handler: value.toggle ? undefined : value.functionality,                    checkHandler: value.toggle ? value.functionality : undefined,                    listeners: {                        render: function(item){                            // After rendering, a tool tip should be added to component                            if (value.description) {                                new Ext.ToolTip({                                    target: item.getEl(),                                    title: value.description                                })                            }                        }                    }                }                                // Create buttons depending on toggle                if(value.toggle) {                    var button = new Ext.menu.CheckItem(buttonCfg);                } else {                    var button = new Ext.menu.Item(buttonCfg);                }                                splitButton.menu.add(button);                            } else { // create normal, simple button                var button = new Ext.Toolbar.Button({                    icon:           value.icon,         // icons can also be specified inline                    cls:            'x-btn-icon',       // Class who shows only the icon                    tooltip:        value.description,  // Set the tooltip                    tooltipType:    'title',            // Tooltip will be shown as in the html-title attribute                    handler:        value.toggle ? null : value.functionality,  // Handler for mouse click                    enableToggle:   value.toggle, // Option for enabling toggling                    toggleHandler:  value.toggle ? value.functionality : null // Handler for toggle (Parameters: button, active)                });                                 toolbar.add(button);                button.getEl().onclick = function() {this.blur()}            }			     			value['buttonInstance'] = button;			this.buttons.push(value);					}).bind(this));		this.enableButtons([])/* Ext 1.1 code. Replaced by Ext 2.0.		var layout = this.facade.getLayout();		layout.addRegion('north',{	                        split:false,	                        initialSize: 28,	                        titlebar: false	                    });		layout.beginUpdate();		layout.add('north', new Ext.ContentPanel(node, 'North'));		layout.endUpdate();*/	/* Ext 1.1 code. Replaced by Ext 2.0.		// Create a logo in the toolbar		ORYX.Editor.graft("http://www.w3.org/1999/xhtml", node.firstChild,					['a', {'href':'http://www.hpi.uni-potsdam.de', target:'_blank', 'style':'position:absolute; right:2px; top:2px;'}, 						['img', {src: ORYX.PATH + 'images/powered_by_hpi.png', height:'22px'}]]);*/	},		onSelectionChanged: function(event) {		this.enableButtons(event.elements);	},	enableButtons: function(elements) {		// Show the Buttons		this.buttons.each((function(value){			value.buttonInstance.enable();									// If there is less elements than minShapes			if(value.minShape && value.minShape > elements.length)				value.buttonInstance.disable();			// If there is more elements than minShapes			if(value.maxShape && value.maxShape < elements.length)				value.buttonInstance.disable();				// If the plugin is not enabled				if(value.isEnabled && !value.isEnabled())				value.buttonInstance.disable();					}).bind(this));			}}ORYX.Plugins.Toolbar = Clazz.extend(ORYX.Plugins.Toolbar);