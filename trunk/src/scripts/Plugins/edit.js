/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if (!ORYX.Plugins)     ORYX.Plugins = new Object();ORYX.Plugins.Edit = Clazz.extend({    facade: undefined,        construct: function(facade){            this.facade = facade;        this.copyElements = [];                this.facade.offer({            name: "Cut",            description: "Cuts the selection into an Oryx clipboard.",            icon: ORYX.PATH + "images/cut.png",            functionality: this.editCut.bind(this),            group: "Edit",            index: 1,            minShape: 1        });                this.facade.offer({            name: "Copy",            description: "Copies the selection into an Oryx clipboard.",            icon: ORYX.PATH + "images/page_copy.png",            functionality: this.editCopy.bind(this),            group: "Edit",            index: 2,            minShape: 1        });                this.facade.offer({            name: "Paste",            description: "Pastes the Oryx clipboard to the canvas.",            icon: ORYX.PATH + "images/page_paste.png",            functionality: this.editPaste.bind(this),            isEnabled: this.clipboardIsOccupied.bind(this),            group: "Edit",            index: 3,            minShape: 0,            maxShape: 0        });                this.facade.offer({            name: "Delete",            description: "Deletes the selection.",            icon: ORYX.PATH + "images/cross.png",            functionality: this.editDelete.bind(this),            group: "Edit",            index: 4,            minShape: 1        });                /*        this.facade.offer({            name: "Show Clipboard",            description: "Show Clipboard.",            icon: ORYX.PATH + "images/box.png",            functionality: this.showClipboard.bind(this),            group: "Edit",            index: 5        });        */        this.facade.registerOnEvent('keydown', this.keyHandler.bind(this));    },        /**     * Determines whether the clipboard currently is occupied.     */    clipboardIsOccupied: function(){        return this.copyElements.length > 0;    },        showClipboard: function(){            alert(this.inspect(this.copyElements, true, 3));    },        inspect: function(toInspect, ignoreFunctions, depth){            if (depth-- <= 0)             return toInspect;                var temp = "";        for (key in toInspect) {                    var current = toInspect[key];                        if (ignoreFunctions && (current instanceof Function))                 continue;                        temp += key + ": (" + this.inspect(current, ignoreFunctions, depth) +            ") -";        }                if (temp == "")             return toInspect;        else             return temp;    },        /**     * The key handler for this plugin. Every action from the set of cut, copy,     * paste and delete should be accessible trough simple keyboard shortcuts.     * This method checks whether any event triggers one of those actions.     *     * @param {Object} event The keyboard event that should be analysed for     *     triggering of this plugin.     */    keyHandler: function(event){        //TODO make this work with mac's meta keys, too.        //TODO document what event.which is.                // assure we have the current event.        if (!event)             event = window.event;                // get the currently pressed key and state of control key.        var pressedKey = event.which || event.keyCode;        var ctrlPressed = event.ctrlKey;                // if the object is to be deleted, do so, and return immediately.        if (pressedKey == ORYX.CONFIG.KEY_CODE_DELETE) {            this.editDelete();            return;        }                // if control key is not pressed, we're not interested anymore.        if (!ctrlPressed)             return;                // when ctrl is pressed, switch trough the possibilities.        switch (pressedKey) {                    // cut.            case ORYX.CONFIG.KEY_CODE_X:                this.editCut();                break;                            // copy.            case ORYX.CONFIG.KEY_CODE_C:                this.editCopy();                break;                            // paste.            case ORYX.CONFIG.KEY_CODE_V:                this.editPaste();                break;        }    },        /**     * Performs the cut operation by first copy-ing and then deleting the     * current selection.     */    editCut: function(){        //TODO document why this returns false.        //TODO document what the magic boolean parameters are supposed to do.                this.editCopy(true);        this.editDelete(true);        return false;    },        /**     * Performs the copy operation.     * @param {Object} will_not_update ??     */    editCopy: function(will_not_update){        //TODO what should be the state of the clipboars, if it previously was        // X, nothing is selected, and that, is then copied. Currently,        // clipboard is empty afterwards.                this.copyElements = [];                this.facade.getSelection().each((function(value){                    var serialize = value.serialize();            this.copyElements.push(serialize);                    }).bind(this));                if (!will_not_update)             this.facade.updateSelection();    },        /**     * Performs the paste operation.     */    editPaste: function(){                var newElements = [];                this.copyElements.each((function(value){                    // Create the new Shape            var newShape = this.facade.createShape({                serialize: value            });                        this.facade.getCanvas().add(newShape);                        newShape.bounds.moveBy(ORYX.CONFIG.EDIT_OFFSET_PASTE, ORYX.CONFIG.EDIT_OFFSET_PASTE);                        // Update            newShape.update();                        newElements.push(newShape);                    }).bind(this));                this.facade.setSelection(newElements);    },        /**     * Performs the delete operation. No more asking.     * @param {Object} will_not_ask ??     */    editDelete: function(will_not_ask){            var elements = this.facade.getSelection();                // we once asked for confirmation:        // var ask_remove = will_not_ask === true || confirm( "Do you really want to delete the selected shape" + ((elements.length == 1) ? "": "s") + "?");        // if(!ask_remove) return;                elements.each((function(shape){            this.facade.deleteShape(shape);        }).bind(this));        this.facade.setSelection([]);    }});