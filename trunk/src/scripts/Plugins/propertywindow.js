/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if(!ORYX.Plugins) {	ORYX.Plugins = new Object();}ORYX.Plugins.PropertyWindow = {	facade: undefined,	construct: function(facade) {		// Reference to the Editor-Interface		this.facade = facade;		// The current Element whos Properties will shown		this.currentElement = undefined;		// The parent div-node of the grid		this.node = ORYX.Editor.graft("http://www.w3.org/1999/xhtml",			null,			['div']);		// If the current property in focus is of type 'Date', the date format		// is stored here.		this.currentDateFormat;/* Ext 1.0 code replaced by Ext2.0.		// The Default ColumnModel		this.ColumnModel = new Ext.grid.ColumnModel([{	           header: "Name",	           dataIndex: 'name',	           width: 80	        },{	           header: "Value",	           dataIndex: 'value',	           width: 97,			   editor: new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank: false})),			   renderer: this.renderer.bind(this)	        }]);	    // by default columns are sortable	    this.ColumnModel.defaultSortable = true;		// The Properties-Array		this.properties = [];		// The Data-Source for the grid        this.dataSource = new Ext.data.Store({		        proxy: new Ext.data.MemoryProxy(this.properties),		        reader: new Ext.data.ArrayReader({}, [			           {name: 'name'},			           {name: 'value'},					   {name: 'gridProperties'}                  ])        });		this.dataSource.load();	    // create the editor grid	    this.grid = new Ext.grid.EditorGrid(this.node, {	        ds: this.dataSource,	        cm: this.ColumnModel,	       // selModel: new Ext.grid.RowSelectionModel(),			clicksToEdit : 1	    });    	// Create a new Region in the editor layout		var layout = this.facade.getLayout();		layout.addRegion('east',{	                        split:true,	                        initialSize: 180,	                        minSize: 120,	                        maxSize: 250,	                        titlebar: true,	                        collapsible: true,                            animate: true,							useShim:true	                    });		// Add the grid to the new layout		layout.beginUpdate();		layout.add('east', new Ext.GridPanel(this.grid, {title: 'Properties'}));		layout.endUpdate();*/		// the properties array		this.properties = [];				// creating the column model of the grid.		this.columnModel = new Ext.grid.ColumnModel([			{				//id: 'name',				header: "Name",				dataIndex: 'name',				width: 90,				sortable: true	        },{				//id: 'value',				header: "Value",				dataIndex: 'value',				width: 90,				editor: new Ext.form.TextField({allowBlank: false}),				renderer: this.renderer.bind(this)	        }		])		// creating the store for the model.        this.dataSource = new Ext.data.Store({			proxy: new Ext.data.MemoryProxy(this.properties),			reader: new Ext.data.ArrayReader({}, [				{name: 'name'},				{name: 'value'},				{name: 'gridProperties'}			])        });		this.dataSource.load();				this.grid = new Ext.grid.EditorGridPanel({			clicksToEdit: 1,			stripeRows: true,			autoExpandColumn: "1",						// the column model			colModel: this.columnModel,						// the data store			store: this.dataSource					});		region = this.facade.addToRegion('east', new Ext.Panel({			width: 200,			layout: "fit",			border: false,			items: [				this.grid,			]		}), "Properties")		// Register on Events		this.grid.on('beforeedit', this.beforeEdit, this, true);		this.grid.on('afteredit', this.afterEdit, this, true);		//this.grid.on('keydown', this.keyDown, this, true);				// Renderer the Grid		this.grid.enableColumnMove = false;		this.grid.render();		// Sort as Default the first column		//this.dataSource.sort('name');	},		specialKeyDown: function(field, event) {		// If there is a TextArea and the Key is an Enter		if(field instanceof Ext.form.TextArea && event.button == ORYX.CONFIG.KEY_Code_enter) {			// Abort the Event			return false		}	},		renderer: function(value) {		if(value instanceof Date) {			// TODO: Date-Schema is not generic			value = value.dateFormat('d/m/y');		} else if(String(value).search("<a href='") < 0) {			// Shows the Value in the Grid in each Line			value = String(value).gsub("<", "&lt;");			value = String(value).gsub(">", "&gt;");			value = String(value).gsub("%", "&#37;");			value = String(value).gsub("&", "&amp;");		}		return value;	},	beforeEdit: function(option) {		var editorGrid = this.dataSource.getAt(option.row).data.gridProperties.editor;		var editorRenderer = this.dataSource.getAt(option.row).data.gridProperties.renderer;		if(editorGrid) {			// Disable KeyDown			this.facade.disableEvent('keydown');			option.grid.getColumnModel().setEditor(1, editorGrid);			//option.grid.getColumnModel().setRenderer(1, editorRenderer);			editorGrid.setSize(option.grid.getColumnModel().getColumnWidth(1), editorGrid.height);		} else {			return false;		}	},	afterEdit: function(option) {		//Ext1.0: option.grid.getDataSource().commitChanges();		option.grid.getStore().commitChanges();		var name = option.record.data.gridProperties.propId;		this.currentElement.setProperty(name, option.value);		this.currentElement.update();		// extended by Kerstin (start)		this.facade.raiseEvent({			type:'propertyWindow.propertyChanged', 			element: this.currentElement,			name: name		});		// extended by Kerstin (end)	},	// extended by Kerstin (start)		dialogClosed: function(field) {		// reopen the text field of the complex list field again		this.scope.grid.startEditing(this.row, this.col);	},	// extended by Kerstin (end)	onSelectionChanged: function(event) {				// Get the only one element		var element = event.elements.length == 1 ? 							event.elements.first():							undefined;				// If there is a subSelection the get the sub selection							element = !element && event.subSelection ?							event.subSelection : 							element;				element = !element ? this.facade.getCanvas() : 							 element;									// Create the Properties		this.createProperties(element);	},		createProperties: function(element) {		this.grid.stopEditing();		if (this.currentElement == element) {			return;		}		this.currentElement = element;		this.properties = [];		if(this.currentElement) {			// add new property lines			var ce = this.currentElement;						this.currentElement.getStencil().properties().each((function(pair) {				var key = pair.prefix() + "-" + pair.id();								// Get the property pair				var name		= pair.title();				var attribute	= ce.properties[key];				var editorGrid = undefined;				var editorRenderer = null;				if(!pair.readonly()){					switch(pair.type()) {						case ORYX.CONFIG.TYPE_STRING:							// If the Text is MultiLine							if(pair.wrapLines()) {								// Set the Editor as TextArea								editorGrid = new Ext.Editor(new Ext.form.TextArea({alignment: "tl-tl", allowBlank: pair.optional(),  msgTarget:'title', maxLength:pair.length()}));							} else {								// If not, set the Editor as InputField								editorGrid = new Ext.Editor(new Ext.form.TextField({allowBlank: pair.optional(),  msgTarget:'title', maxLength:pair.length()}));							}							break;						case ORYX.CONFIG.TYPE_BOOLEAN:							// Set the Editor as a CheckBox							editorGrid = new Ext.Editor(new Ext.form.Checkbox());							break;						case ORYX.CONFIG.TYPE_INTEGER:							// Set as an Editor for Integers							editorGrid = new Ext.Editor(new Ext.form.NumberField({allowBlank: pair.optional(), allowDecimals:false, msgTarget:'title', minValue: pair.min(), maxValue: pair.max()}));							break;						case ORYX.CONFIG.TYPE_FLOAT:							// Set as an Editor for Float							editorGrid = new Ext.Editor(new Ext.form.NumberField({ allowBlank: pair.optional(), allowDecimals:true, msgTarget:'title', minValue: pair.min(), maxValue: pair.max()}));							break;						case ORYX.CONFIG.TYPE_COLOR:							// Set as a ColorPicker							// Ext1.0 editorGrid = new gEdit(new form.ColorField({ allowBlank: pair.optional(),  msgTarget:'title' }));							editorGrid = new Ext.Editor(new Ext.ux.ColorField({ allowBlank: pair.optional(),  msgTarget:'title' }));							break;						case ORYX.CONFIG.TYPE_CHOICE:							var items = pair.items();							// Generate a new list							var select = ORYX.Editor.graft("http://www.w3.org/1999/xhtml", this.node, ['select', {style:'display:none'}]);							var optionTmpl = new Ext.Template('<option value="{value}">{value}</option>');							items.each(function(value){ optionTmpl.append(select, {value:value.value()}); })							// Set the grid Editor							editorGrid = new Ext.Editor(new Ext.form.ComboBox({ typeAhead: true, triggerAction: 'all', transform:select, lazyRender:true,  msgTarget:'title'}));							break;						case ORYX.CONFIG.TYPE_DATE:							var currFormat = pair.dateFormat()							if(!(attribute instanceof Date))								attribute = Date.parseDate(attribute, currFormat)							editorGrid = new Ext.Editor(new Ext.form.DateField({ allowBlank: pair.optional(), format:currFormat,  msgTarget:'title'}));							break;/*						// extended by Kerstin (start)						case ORYX.CONFIG.TYPE_COMPLEX:							editorGrid = new Ext.form.ComplexListField({ allowBlank: pair.optional()}, pair.complexItems(), key, this.facade);							field.on('dialogClosed', this.dialogClosed, {scope:this, row:this.properties.length, col:1});														break;						// extended by Kerstin (end)						*/												default:							editorGrid = new Ext.Editor(new Ext.form.TextField({ allowBlank: pair.optional(),  msgTarget:'title', maxLength:pair.length()}));					}					// Register Event to enable KeyDown					editorGrid.on('beforehide', this.facade.enableEvent.bind(this, 'keydown'));					editorGrid.on('specialkey', this.specialKeyDown.bind(this));				} else if(pair.type() === ORYX.CONFIG.TYPE_URL){					attribute = String(attribute).search("http") !== 0 ? ("http://" + attribute) : attribute;					attribute = "<a href='" + attribute + "' target='_blank'>" + attribute.split("://")[1] + "</a>"				}				// Push to the properties-array				this.properties.push([name, attribute, {					editor: editorGrid, 					propId: key, 					type: pair.type(), 					renderer: editorRenderer				}])			}).bind(this));		}		this.setProperties(this.properties);	},	setProperties: function(properties) {		this.dataSource.loadData(properties);	},}ORYX.Plugins.PropertyWindow = Clazz.extend(ORYX.Plugins.PropertyWindow);