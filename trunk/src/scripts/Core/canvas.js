/** * Copyright (c) 2006 * Martin Czuchra, Nicolas Peters, Daniel Polak, Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **//** * Init namespaces */if(!ORYX) {var ORYX = {};}if(!ORYX.Core) {ORYX.Core = {};}/** * @classDescription Top Level uiobject. * */ORYX.Core.Canvas = ORYX.Core.AbstractShape.extend({	/**	 * Constructor	 */	construct: function(options) {		arguments.callee.$.construct.apply(this, arguments);		if(!(options && options.width && options.height)) {					ORYX.Log.fatal("Canvas is missing mandatory parameters options.width and options.height.");			return;		};					//TODO set document resource id		this.resourceId = '';				//init svg document		this.rootNode = ORYX.Editor.graft("http://www.w3.org/2000/svg", null,			['svg', {id: this.id, width: options.width, height: options.height},				['defs', {}]			]);					this.rootNode.setAttributeNS("xmlns", "xlink", "http://www.w3.org/1999/xlink");		this.rootNode.setAttributeNS("xmlns", "svg", "http://www.w3.org/2000/svg");		this._htmlContainer = ORYX.Editor.graft("http://www.w3.org/1999/xhtml", null,			['div', {style:"position:relative; top:-" + (options.height + 4) + "px"}]);				this.node = ORYX.Editor.graft("http://www.w3.org/2000/svg", this.rootNode,			['g', {},				['g', {"class": "stencils"},					['g', {"class": "me"}],					['g', {"class": "children"}],					['g', {"class": "edge"}]				],				['g', {"class":"svgcontainer"}]			]);				/*		var off = 2 * ORYX.CONFIG.GRID_DISTANCE;		var size = 3;		var d = "";		for(var i = 0; i <= options.width; i += off)			for(var j = 0; j <= options.height; j += off)				d = d + "M" + (i - size) + " " + j + " l" + (2*size) + " 0 m" + (-size) + " " + (-size) + " l0 " + (2*size) + " m0" + (-size) + " ";									ORYX.Editor.graft("http://www.w3.org/2000/svg", this.node.firstChild.firstChild,			['path', {d:d , stroke:'#000000', 'stroke-width':'0.15px'},]);		*/					this.bounds.set(0,0,options.width,options.height);				this.addEventHandlers(this.rootNode);	},		/**	 * Overrides the UIObject.add method. Adds uiObject to the correct sub node.	 * @param {UIObject} uiObject	 */	add: function(uiObject) {		//if uiObject is child of another UIObject, remove it.		if(uiObject instanceof ORYX.Core.UIObject) {			if (!(this.children.member(uiObject))) {				//if uiObject is child of another parent, remove it from that parent.				if(uiObject.parent) {					uiObject.parent.remove(uiObject);				}				//add uiObject to the Canvas				this.children.push(uiObject);				//set parent reference				uiObject.parent = this;				//add uiObject.node to this.node depending on the type of uiObject				if(uiObject instanceof ORYX.Core.Shape) {					if(uiObject instanceof ORYX.Core.Edge) {						uiObject.node = this.node.childNodes[0].childNodes[2].appendChild(uiObject.node);						uiObject.addMarkers();					} else {						uiObject.node = this.node.childNodes[0].childNodes[1].appendChild(uiObject.node);					}				} else {	//UIObject					uiObject.node = this.node.appendChild(uiObject.node);				}				uiObject.bounds.registerCallback(this._changedCallback);			} else {								ORYX.Log.warn("add: ORYX.Core.UIObject is already a child of this object.");			}		} else {			ORYX.Log.fatal("add: Parameter is not of type ORYX.Core.UIObject.");		}	},	/**	 * Overrides the UIObject.remove method. Removes uiObject.	 * @param {UIObject} uiObject	 */	remove: function(uiObject) {		//if uiObject is a child of this object, remove it.		if (this.children.member(uiObject)) {			//remove uiObject from children			this.children = this.children.without(uiObject);			//delete parent reference of uiObject			uiObject.parent = undefined;			//delete uiObject.node from this.node			if(uiObject instanceof ORYX.Core.Shape) {				if(uiObject instanceof ORYX.Core.Edge) {					uiObject.removeMarkers();					uiObject.node = this.node.childNodes[0].childNodes[2].removeChild(uiObject.node);				} else {					uiObject.node = this.node.childNodes[0].childNodes[1].removeChild(uiObject.node);				}			} else {	//UIObject					uiObject.node = this.node.removeChild(uiObject.node);			}			uiObject.bounds.unregisterCallback(this._changedCallback);		} else {			ORYX.Log.warn("remove: ORYX.Core.UIObject is not a child of this object.");		}	},	getRootNode: function() {		return this.rootNode;	},		getSvgContainer: function() {		return this.node.childNodes[1];	},		getHTMLContainer: function() {		return this._htmlContainer;	},		/**	 * Return all elements of the same highest level	 * @param {Object} elements	 */	getShapesWithSharedParent: function(elements) {		// If there is no elements, return []		if(!elements || elements.length < 1) { return [] }		// If there is one element, return this element		if(elements.length == 1) { return elements}		return elements.findAll(function(value){			var parentShape = value.parent;			while(parentShape){				if(elements.member(parentShape)) return false;				parentShape = parentShape.parent			}			return true;		});			},	setSize: function(size) {		if(!size || !size.width || !size.height){return}				if(this.rootNode.parentNode){			this.rootNode.parentNode.style.width = size.width + 'px';			this.rootNode.parentNode.style.height = size.height + 'px';		}				this.rootNode.setAttributeNS(null, 'width', size.width);		this.rootNode.setAttributeNS(null, 'height', size.height);		this._htmlContainer.style.top = "-" + (size.height + 4) + 'px';				
	},	toString: function() { return "Canvas " + this.id } });