require 'rubygems'
require 'buildr'
require 'yaml'

VERSION_NUMBER = "1.0"
repositories.remote << 'http://www.ibiblio.org/maven2'
repositories.remote << 'http://repo.open.iona.com/maven2-all'
repositories.remote << 'http://www.agilejava.com/maven'

# Using maven2 repos, please check http://www.mvnrepository.com/
POEM_JARS = [
  'org.hibernate:hibernate-annotations:jar:3.3.0.ga',
  'org.hibernate:hibernate-commons-annotations:jar:3.3.0.ga',
  'postgresql:postgresql:jar:8.3-603.jdbc3',
  'javax.servlet:servlet-api:jar:2.5',
  'commons-httpclient:commons-httpclient:jar:3.0.1',
  'jdom:jdom:jar:1.0',
  'log4j:log4j:jar:1.2.14',
  'net.sf.ehcache:ehcache:jar:1.3.0',
  'org.htmlparser:htmlparser:jar:1.6',
  'org.springframework:spring-jdbc:jar:2.0.6',
  'xalan:xalan:jar:2.7.0',
  'xerces:xercesImpl:jar:2.8.1',
  'xml-apis:xml-apis:jar:2.0.2',
  #'xml-apis:xml-apis-ext:jar:1.3.04',
  'xml-security:xmlsec:jar:1.3.0',
  'javax.servlet:servlet-api:jar:2.5',
].map{|pom| transitive(pom)}

# No transitive dependencies
POEM_JARS += [
    'org.apache.xmlgraphics:fop:jar:0.94',
    'org.apache.xmlgraphics:xmlgraphics-commons:jar:1.3',
    'org.apache.commons:commons-io:jar:1.3.2',
    'batik:batik-awt-util:jar:1.6-1',
    'batik:batik-bridge:jar:1.6-1',
    'batik:batik-css:jar:1.6-1',
    'batik:batik-dom:jar:1.6-1',
    'batik:batik-ext:jar:1.6-1',
    'batik:batik-extension:jar:1.6-1',
    'batik:batik-gvt:jar:1.6-1',
    'batik:batik-parser:jar:1.6-1',
    'batik:batik-rasterizer:jar:1.6-1',
    'batik:batik-rasterizer-ext:jar:1.6-1',
    'batik:batik-script:jar:1.6-1',
    'batik:batik-svg-dom:jar:1.6-1',
    'batik:batik-transcoder:jar:1.6-1',
    'batik:batik-util:jar:1.6-1',
    'batik:batik-xml:jar:1.6-1',
    'org.openid4java:openid4java:jar:0.9.3',
    'org.jruby:jruby-complete:jar:1.1RC2'
]

# Sun does not allow this. So the jar needs to be self-installed
# Please remove shared/jta-1_0_1B-classes.jar from oryx svn asap
install artifact('javax.transaction:jta:jar:1.0.1B').from(file('shared/jta-1_0_1B-classes.jar'))
install artifact('com.ibm.icu:icu4j:pom:3.4.1').from(file('shared/icu4j_3_4_1.jar'))
install artifact('org.openxri:openxri-client:jar:1.0.1').from(file('shared/openxri-client.jar'))
install artifact('org.openxri:openxri-syntax:jar:1.0.1').from(file('shared/openxri-syntax.jar'))

# the project definition
define 'poem' do
  project.version = VERSION_NUMBER
  project.group = 'org.b3mn'
  manifest['Implementation-Vendor'] = 'http://bpt.hpi.uni-potsdam.de'
  
  # the subprojects
  desc 'Backend Implementation'
  define 'backend' do
    puts "svn info --xml --non-interactive > backend/src/main/webapp/version.xml"
    puts %x{svn info --xml --non-interactive > backend/src/main/webapp/version.xml}
    compile.with POEM_JARS
    package(:war).with :libs => POEM_JARS
	package(:war).libs += artifacts('com.ibm.icu:icu4j:pom:3.4.1')
	package(:war).libs += artifacts('org.openxri:openxri-client:jar:1.0.1')
	package(:war).libs += artifacts('org.openxri:openxri-syntax:jar:1.0.1')
  end

end

# This tasks nukes the postgres, ensure createdb and dropdb to be in path
task 'clean-postgres' do
  shared = %Q{-h #{db_config['host']} #{db_config['database']}}
  user = "-U #{db_config['superuser']}" if db_config['superuser']
  puts "dropdb #{user} #{shared}"
  puts %x{dropdb #{user} #{shared}}
  puts "createdb -E utf8 -O #{db_config['username']} #{user} #{shared}"
  puts %x{createdb -E utf8 -O #{db_config['username']} #{user} #{shared}}
end

# This task calls migrate, just "buildr clean-postgres migrate" will do
task 'migrate' do
  require 'active_record'
  ActiveRecord::Base.logger = Logger.new(STDOUT)
  ActiveRecord::Base.establish_connection(db_config)
  ActiveRecord::Migrator.migrate(
    File.join(File.dirname(__FILE__), 'backend', 'src', 'main', 'migration'), 
    ENV['VERSION'] ? ENV['VERSION'].to_i : nil
  )
end

# This tasks dumps the PostgreSQL database into a file. (ensure that pg_dump is in the path)
task 'dump-db' do
  shared = %Q{-h #{db_config['host']} #{db_config['database']}}
  user = "-U #{db_config['superuser']}" if db_config['superuser']
  puts "pg_dump --clean --file=database_dump_raw.sql --format=plain #{user} #{shared}"
  puts %x{pg_dump --clean --file=database_dump_raw.sql --format=plain #{user} #{shared}}
end

# Helper to read the config, notice hibernate has it's own config (go generate!)
def db_config
  YAML.load_file(File.join(File.dirname(__FILE__),'shared', 'database.yml'))[$POEM_ENV || 'development']
end
