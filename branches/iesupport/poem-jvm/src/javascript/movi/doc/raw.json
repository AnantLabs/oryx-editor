{"majorversion": 2, "filemap": {"modelnavigator.js": {"classlist": ["MOVI.widget.ModelNavigator"], "name": "modelnavigator.js", "module": "movi"}, "movi.js": {"classlist": [], "name": "movi.js", "module": "movi"}, "modelviewer.js": {"classlist": ["MOVI.widget.ModelViewer"], "name": "modelviewer.js", "module": "movi"}, "node.js": {"classlist": ["MOVI.model.Node"], "name": "node.js", "module": "movi"}, "stencilset.js": {"classlist": ["MOVI.stencilset.Stencilset"], "name": "stencilset.js", "module": "movi"}, "shapeselect.js": {"classlist": ["MOVI.util.ShapeSelect"], "name": "shapeselect.js", "module": "movi"}, "edge.js": {"classlist": ["MOVI.model.Edge"], "name": "edge.js", "module": "movi"}, "marker.js": {"classlist": ["MOVI.util.Marker"], "name": "marker.js", "module": "movi"}, "config.js": {"classlist": [], "name": "config.js", "module": "movi"}, "shape.js": {"classlist": ["MOVI.model.Shape"], "name": "shape.js", "module": "movi"}, "stencil.js": {"classlist": ["MOVI.stencilset.Stencil"], "name": "stencil.js", "module": "movi"}, "canvas.js": {"classlist": ["MOVI.model.Canvas"], "name": "canvas.js", "module": "movi"}, "annotation.js": {"classlist": ["MOVI.util.Annotation"], "name": "annotation.js", "module": "movi"}}, "modules": {"movi": {"description": "Declare the movi module (needed for doc generation)", "submodules": [], "classlist": ["MOVI.util.Annotation", "MOVI.model.Canvas", "MOVI.model.Edge", "MOVI.util.Marker", "MOVI.widget.ModelNavigator", "MOVI.widget.ModelViewer", "MOVI.model.Node", "MOVI.model.Shape", "MOVI.util.ShapeSelect", "MOVI.stencilset.Stencil", "MOVI.stencilset.Stencilset"], "filelist": ["annotation.js", "canvas.js", "config.js", "edge.js", "marker.js", "modelnavigator.js", "modelviewer.js", "movi.js", "node.js", "shape.js", "shapeselect.js", "stencil.js", "stencilset.js"], "subdata": {}, "name": "movi"}}, "classmap": {"MOVI.model.Edge": {"name": "MOVI.model.Edge", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new edge\nis created."}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the edge's \nstencil."}, {"type": "Shape", "name": "parent", "description": " The edges's parent shape"}], "description": "A wrapper class for model edges."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Edge", "methods": {"update": {"description": "Update style properties of the element", "guessedname": "update", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "edge.js", "guessedtype": "function", "shortname": "Edge", "description": "A wrapper class for model edges."}, "MOVI.model.Canvas": {"name": "MOVI.model.Canvas", "constructors": [{"params": [{"type": "Modelviewer", "name": "modelviewer", "description": " The Modelviewer object that owns\nthe canvas"}, {"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new canvas\nis created."}], "description": "Canvas provides a wrapper object for the model's root shape."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Canvas", "methods": {"_indexShapes": {"guessedname": "_indexShapes", "params": [{"type": "Shape", "name": "recShape", "description": " (optional) Temporarily considered shape\nfor recursion"}], "description": "Index all shapes owned by the model. Deep traverse canvas'\nchild shapes and add all objects to the 'shapes' property.", "private": "", "guessedtype": "function"}, "_update": {"private": "", "description": "Update style properties of the element", "guessedname": "_update", "guessedtype": "function"}, "getShape": {"params": [{"type": "", "name": "resourceId", "description": " The shape's resource id"}], "description": "Returns the shape with the specified resource id. \nIf no matching stencil is found null is returned.", "guessedname": "getShape", "guessedtype": "function"}, "getModelViewer": {"return": {"type": "ModelViewer", "description": "The owning model viewer"}, "description": "Returns the owning modelviewer", "guessedname": "getModelViewer", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "canvas.js", "guessedtype": "function", "shortname": "Canvas", "properties": {"shapes": {"type": "Object", "description": "A key map containing all shapes of the model with their\nresource ids as keys.", "guessedname": "shapes", "guessedtype": "property"}, "modelBorder": {"description": "The margin of the model's PNG image", "guessedname": "MODEL_MARGIN", "guessedtype": "property"}, "modelviewer": {"guessedname": "_modelviewer", "type": "Modelviewer", "description": "The owning modelviewer", "private": "", "guessedtype": "property"}}, "description": "Canvas provides a wrapper object for the model's root shape."}, "MOVI.model.Shape": {"name": "MOVI.model.Shape", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new shape\nis created"}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the shape's \nstencil"}, {"type": "Shape", "name": "parent", "description": " The shapes's parent shape"}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the shape element's \ninitial attributes"}], "description": "An abstract base class providing a wrapper object for all \nmodel shapes (including the canvas, nodes, and edges)."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Shape", "methods": {"getCanvas": {"return": {"type": "Canvas", "description": "The Canvas the shape belongs to"}, "description": "Returns the canvas that own this shape", "guessedname": "getCanvas", "guessedtype": "function"}, "getAbsBounds": {"return": {"type": "Object} The absolute shape bounds accessible as \n{ upperLeft: {x:Number,y:Number}, lowerRight: {x:Number,y:Number} ", "description": ""}, "description": "Returns the shape's absolute bounds coordinates. 'Absolute' means\nrelative to the canvas element rather than relative to the document", "guessedname": "getAbsBounds", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "shape.js", "guessedtype": "function", "shortname": "Shape", "properties": {"parentShape": {"description": "The shapes parent shape", "guessedname": "parentShape", "guessedtype": "property"}}, "description": "An abstract base class providing a wrapper object for all \nmodel shapes (including the canvas, nodes, and edges)."}, "MOVI.util.Marker": {"name": "MOVI.util.Marker", "constructors": [{"params": [{"type": "Shape|Shapes[]", "name": "shapes", "description": " (optional) The shapes to mark"}, {"type": "Object", "name": "style", "description": " (optional) A key map of CSS style properties to be attached\nto the shape marking rectangles."}], "description": "Attach Marker objects to the model to highlight a shape or a set of shapes\nby overlaying rectangles"}], "namespace": "MOVI.util", "module": "movi", "guessedname": "Marker", "methods": {"_setUpHostElement": {"private": "", "description": "Add image to the host element and create the clipping rectangle element.\nEnsure that host element's position is not static to allow absolute\npositioning of the clipping rect relative to the host element.", "guessedname": "_setUpHostElement", "guessedtype": "function"}, "getShapes": {"params": [{"type": "[Shape]", "name": "An", "description": " array of the marked Shape objects"}], "description": "Return the marked shapes", "guessedname": "getShapes", "guessedtype": "function"}, "_update": {"private": "", "description": "Update style properties of the element", "guessedname": "_update", "guessedtype": "function"}, "hide": {"description": "Convenience method to hide all marking rectangles", "guessedname": "hide", "guessedtype": "function"}, "show": {"description": "Convenience method to show all marking rectangles", "guessedname": "show", "guessedtype": "function"}, "removeAllShapes": {"description": "Remove all shapes from the marker", "guessedname": "removeAllShapes", "guessedtype": "function"}, "getRectStyle": {"returns": "{Object} A key map storing the style properties", "params": [{"type": "String", "name": "property", "description": " The property"}], "description": "Returns the value for the specified style property that is applied to each \nmarking rectangle element", "guessedname": "getRectStyle", "guessedtype": "function"}, "getRectClassName": {"returns": "{String} The applied class name", "description": "Return the class name applied for all marking rectangle elements", "guessedname": "getRectClassName", "guessedtype": "function"}, "remove": {"description": "Remove the marker elements from the DOM", "guessedname": "remove", "guessedtype": "function"}, "setRectClassName": {"params": [{"type": "String", "name": "className", "description": " The class name value"}], "description": "Wrapper for setting the class name for all marking rectangle elements", "guessedname": "setRectClassName", "guessedtype": "function"}, "removeShape": {"params": [{"type": "Shape", "name": "shape", "description": " The shape object to be removed"}], "description": "Remove a shape from the marker", "guessedname": "removeShape", "guessedtype": "function"}, "addShape": {"params": [{"type": "Shape", "name": "shape", "description": " The shape object to add"}], "description": "Add a shape to the marker", "guessedname": "addShape", "guessedtype": "function"}, "setRectStyle": {"params": [{"type": "String", "name": "property", "description": " The property"}, {"type": "String", "name": "value", "description": " The value"}], "description": "Wrapper for setting style properties of all marking rectangle elements", "guessedname": "setRectStyle", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "marker.js", "guessedtype": "function", "shortname": "Marker", "properties": {"MOVI.util.Marker.PADDING": {"description": "The padding beween the marker's border and the shape's border.", "default": "2", "static": "", "guessedname": "PADDING", "guessedtype": "property", "type": "integer"}, "shapes": {"guessedname": "_shapes", "type": "Object", "description": "A key map containing all marked shapes with their resource IDs as keys", "private": "", "guessedtype": "property"}, "style": {"guessedname": "_style", "type": "Object", "description": "A key map containing the CSS style property definitions that are applied \nto each shape marking rectangle.", "private": "", "guessedtype": "property"}, "shapeRects": {"type": "{ Integer : Element }", "description": "A key map containing all shape rectangle elements of the marker with the\nassociated shape resource IDs as keys", "guessedname": "shapeRects", "guessedtype": "property"}, "_className": {"guessedname": "_className", "type": "String", "description": "The class name that is specified for each shape marking rectangle.", "private": "", "guessedtype": "property"}}, "description": "Attach Marker objects to the model to highlight a shape or a set of shapes\nby overlaying rectangles"}, "MOVI.widget.ModelNavigator": {"modelviewer": "{ModelViewer} modelviewer The ModelViewer that is navigated", "name": "MOVI.widget.ModelNavigator", "constructors": [{"params": [{"type": "HTMLElement | String ", "name": "el", "description": " The id of the container DIV element that will \nwrap the ModelNavigator, or a reference to a DIV element. The DIV element must\nexist in the document."}], "description": "The ModelNavigator widget is a UI control that enables users to navigate\nin a model displayed in a ModelViewer component. A rectangle indicates the\nmodel clipping."}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "ModelNavigator", "methods": {"update": {"description": "Callback to update the clipping rectangle's position and size.\nAlso updates the image if another model has been loaded in the \nmodel viewer.", "guessedname": "update", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "modelnavigator.js", "guessedtype": "function", "shortname": "ModelNavigator", "properties": {"_image": {"guessedname": "_image", "type": "Element", "description": "The image element", "private": "", "guessedtype": "property"}, "_instances": {"private": "", "description": "Array to keep track of all instances", "guessedname": "_instances", "guessedtype": "property"}, "modelviewer": {"type": "ModelViewer", "description": "The ModelViewer that is navigated", "guessedname": "modelviewer", "guessedtype": "property"}, "_clippingRect": {"guessedname": "_clippingRect", "type": "Element", "description": "The clipping rectangle DIV element.", "private": "", "guessedtype": "property"}}, "description": "The ModelNavigator widget is a UI control that enables users to navigate\nin a model displayed in a ModelViewer component. A rectangle indicates the\nmodel clipping."}, "MOVI.widget.ModelViewer": {"name": "MOVI.widget.ModelViewer", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " The id of the container DIV element that will \nwrap the ModelViewer, or a reference to a DIV element. The DIV element must\nexist in the document."}], "description": "A widget to display an Oryx model"}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "ModelViewer", "methods": {"scrollToShape()": {"return": {"type": "Element", "description": "The shape element / null if it does not exist"}, "description": "Scrolls to the shape, i.e. centers the (canvas around the) shape \nwithin the scrollbox.", "params": [{"type": "", "name": "shape", "description": " the shape or its resource id"}], "guessedname": "scrollToShape", "guessedtype": "function", "throws": "Error if scrollbox dimensions cannot be calculated"}, "_onSuccess": {"private": "", "description": "Callback that is executed when the model is finished\nloading.", "guessedname": "_onSuccess", "guessedtype": "function"}, "getInstance": {"return": {"type": "MOVI.widget.ModelViewer", "description": "A ModelViewer instance"}, "params": [{"type": "Integer | String", "name": "id", "description": " The id of the ModelViewer instance, \nor the id of the instance's host DIV element."}], "description": "Returns the ModelViewer instance with the specified id.", "guessedname": "getInstance", "guessedtype": "function"}, "_loadImage": {"guessedname": "_loadImage", "params": [{"type": "String", "name": "uri", "description": " The URI of the model (without /self)."}], "description": "Load the PNG image representation of the model.", "private": "", "guessedtype": "function"}, "_onStencilSetLoadTimeout": {"private": "", "description": "Callback for handling stencil set load timeouts.", "guessedname": "_onStencilSetLoadTimeout", "guessedtype": "function"}, "loadModel": {"throws": "Exception, if passed URI is not valid", "params": [{"type": "String", "name": "uri", "description": " The URI of the model (without /self). \nFor example: 'http://oryx-editor.org/backend/poem/model/1234'"}, {"type": "Object", "name": "opt", "description": " Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\nCallback to execute when the model is finished loading\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>onFailure</dt>\n<dd>\nCallback to execute when the model load operation fails\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>onTimeout</dt>\n<dd>\nCallback to execute when a timeout occurs. If not set\nthe onFailure callback will be executed on timeout.\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>scope</dt>\n<dd>The execution scope for the callbacks.</dd>\n<dt>timeout</dt>\n<dd>\nNumber of milliseconds to wait before aborting the loading\nof the model and executing the onFailure callback.\nThe default value is 15000 (15 seconds).\n</dd>\n</dl>"}], "description": "Loads the specified Oryx model in the viewer.", "guessedname": "loadModel", "guessedtype": "function"}, "_onLoadTimeout": {"private": "", "description": "Callback for handling model load timeouts.", "guessedname": "_onLoadTimeout", "guessedtype": "function"}, "getImgWidth": {"return": {"type": "Integer", "description": "The image width"}, "description": "Returns the width of the model image element in pixels", "guessedname": "getImgWidth", "guessedtype": "function"}, "_onStencilSetLoadFailure": {"private": "", "description": "Callback for handling stencil set load failures.", "guessedname": "_onStencilSetLoadFailure", "guessedtype": "function"}, "getImgHeight": {"return": {"type": "Integer", "description": "The image height"}, "description": "Returns the height of the model image element in pixels", "guessedname": "getImgHeight", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Function", "name": "modelReadyCallback", "description": " The function to call after loading of the model is finished"}, {"type": "String", "name": "moviBase", "description": " The path to the base directory of MOVI."}, {"type": "Function", "name": "yuiReadyCallback", "description": " (optional) The function to call after loading of the YUI modules is finished"}, {"type": "String*", "name": "yuiModules", "description": " (optional) Additional YUI modules to load. By default MOVI loads 'yahoo', 'dom', 'event', \n'get', 'event', 'logger', 'resize'. Use this parameter if your script depends on other YUI modules."}], "description": "Loads the required YUI resources and all MOVI scripts. When loading\nis finished the specified callback is executed.\nUse this method to initialize MOVI and wrap your MOVI specific code\nin the callback function passed to this method.\n<pre>\nMOVI.init(function() {\nvar modelViewer = new MOVI.widget.ModelViewer(YAHOO.util.Dom.get(\"myMoviDivId\"));\n}, \"script/movi\", setUpMyUI, [\"editor\"]);\n</pre>", "guessedname": "init", "guessedtype": "function"}, "getScrollboxEx": {"return": {"type": "Element", "description": "The scrollbox Element"}, "description": "Returns the canvas container Element realizing scrolling", "guessedname": "getScrollboxEl", "guessedtype": "function"}, "_onLoadFailure": {"private": "", "description": "Callback for handling model load failures.", "guessedname": "_onLoadFailure", "guessedtype": "function"}, "loadStencilSetCallback": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "JSONP callback to load stencilset data from the JSON web service", "guessedname": "loadStencilSetCallback", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nMOVI.namespace(\"property.package\");\nMOVI.namespace(\"MOVI.property.package\");\n</pre>\nEither of the above would create MOVI.property, then\nMOVI.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nMOVI.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript\nThis method is taken from YUI's YAHOO object.", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "loadModelCallback": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "JSONP callback to load model data from the JSON web service", "guessedname": "loadModelCallback", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "modelviewer.js", "guessedtype": "function", "shortname": "ModelViewer", "properties": {"_image": {"guessedname": "_image", "type": "Element", "description": "The image element", "private": "", "guessedtype": "property"}, "_scrollbox": {"guessedname": "_scrollbox", "type": "Element", "description": "The canvas container Element realizing scrolling", "private": "", "guessedtype": "property"}, "_modelUri": {"guessedname": "_modelUri", "type": "String", "description": "URI of the model to display", "private": "", "guessedtype": "property"}, "canvas": {"type": "Canvas", "description": "The model's canvas", "guessedname": "canvas", "guessedtype": "property"}, "_loadOptions": {"guessedname": "_loadOptions", "type": "Object", "description": "Options passed to loadModel method", "private": "", "guessedtype": "property"}}, "description": "A widget to display an Oryx model"}, "MOVI.model.Node": {"name": "MOVI.model.Node", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new node\nis created."}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the node's \nstencil."}, {"type": "Shape", "name": "parent", "description": " The node's parent shape"}], "description": "A wrapper class for model nodes."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Node", "methods": {"_createHostElement": {"private": "", "description": "Create the host element.", "guessedname": "_createHostElement", "guessedtype": "function"}, "_getSubclassForJSONObj": {"guessedname": "_getSubclassForJSONObj", "params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object to create the shape from"}, {"type": "Stencilset", "name": "stencilset", "description": " The stencilset object"}], "description": "Returns the appropriate subclass to choose when creating the shape \nobject from the specified JSON object. If no subclass can be \ndetermined the Shape base class is returned.", "private": "", "guessedtype": "function"}, "update": {"description": "Update style properties of the element", "guessedname": "update", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "node.js", "guessedtype": "function", "shortname": "Node", "description": "A wrapper class for model nodes."}, "MOVI.stencilset.Stencilset": {"name": "MOVI.stencilset.Stencilset", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON definition of a stencilset"}], "description": "Stencilset is a collection of stencils."}], "namespace": "MOVI.stencilset", "module": "movi", "guessedname": "Stencilset", "methods": {"getStencil": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "Returns the stencil object with the specified id. If\nthe stencilset does not contain a matching stencil\nnull is returned.", "guessedname": "getStencil", "guessedtype": "function"}}, "file": "stencilset.js", "guessedtype": "function", "shortname": "Stencilset", "properties": {"stencils": {"description": "A key map containing all stencils of the stencilset as values.\nRetrieve an entry using the stencil's id as the key.", "guessedname": "stencils", "guessedtype": "property"}}, "description": "Stencilset is a collection of stencils."}, "MOVI.util.Annotation": {"name": "MOVI.util.Annotation", "constructors": [{"params": [{"type": "Marker", "name": "marker", "description": " The Marker to attach the Annotation to"}, {"type": "String", "name": "content", "description": " The Annotation's inner HTML content"}], "description": "Create an Annotation for a Marker to enrich the model with additional information \nand functionality. The Annotation renders a speech bubble containing arbitrary\nXHTML content and attachs it to the Marker."}], "namespace": "MOVI.util", "module": "movi", "guessedname": "Annotation", "methods": {"": {"private": "", "description": "Create the host element.", "guessedname": "_createHostElement", "guessedtype": "function"}, "hide": {"description": "Hide the annotation bubble", "guessedname": "hide", "guessedtype": "function"}, "show": {"description": "Show the annotation bubble", "guessedname": "show", "guessedtype": "function"}, "onClose": {"params": [{"type": "Function", "name": "callback", "description": " The callback function"}, {"type": "Any", "name": "data", "description": " The variable to pass to the callback function"}, {"type": "Object", "name": "scope", "description": " The object to use as the scope for the callback"}], "description": "Specfiy a callback that is executed when the annotation bubble is\nclosed using the close button", "guessedname": "onClose", "guessedtype": "function"}, "_onClose": {"private": "", "description": "Callback that is executed when the close button is clicked", "guessedname": "_close", "guessedtype": "function"}, "remove": {"description": "Remove the element from the DOM", "guessedname": "remove", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "annotation.js", "guessedtype": "function", "shortname": "Annotation", "properties": {"_contentElement": {"guessedname": "_contentElement", "type": "Element", "description": "The Element containing the specified content as inner HTML.", "private": "", "guessedtype": "property"}, "_marker": {"guessedname": "_marker", "type": "Marker", "description": "The marker that the annotation is attached to", "private": "", "guessedtype": "property"}, "_closeCallback": {"guessedname": "_closeCallback", "type": "Object", "description": "The callback that is executed when the annotation bubble is closed", "private": "", "guessedtype": "property"}}, "description": "Create an Annotation for a Marker to enrich the model with additional information \nand functionality. The Annotation renders a speech bubble containing arbitrary\nXHTML content and attachs it to the Marker."}, "MOVI.stencilset.Stencil": {"name": "MOVI.stencilset.Stencil", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new stencil\nis created."}], "description": "Stencil represents an entity of a stencilset."}], "namespace": "MOVI.stencilset", "module": "movi", "guessedname": "Stencil", "file": "stencil.js", "guessedtype": "function", "shortname": "Stencil", "description": "Stencil represents an entity of a stencilset."}, "MOVI.util.ShapeSelect": {"name": "MOVI.util.ShapeSelect", "constructors": [{"params": [{"type": "ModelViewer", "name": "modelviewer", "description": " The ModelViewer for that shape selection is enabled"}, {"type": "Shape*", "name": "shapes", "description": " (optional) The subset of shapes that are selectable. If not specified \nall shapes are selectable."}, {"type": "Boolean", "name": "multiselect", "description": " (optional) If set to true, multiple shapes can be selected (default is false)."}], "description": "Enbable shape selection for the specified model viewer"}], "namespace": "MOVI.util", "module": "movi", "guessedname": "ShapeSelect", "methods": {"reset": {"description": "Reset the current selection", "guessedname": "reset", "guessedtype": "function"}, "deselect": {"params": [{"type": "[Shape] | Shape", "name": "shapes", "description": " The shapes to remove from the selection"}], "description": "Remove the specified shapes from the current selection", "guessedname": "deselect", "guessedtype": "function"}, "getSelectShapes": {"returns": "{[Shape]} An array of selected Shape objects", "description": "Returns the currently selected shapes", "guessedname": "getSelectedShapes", "guessedtype": "function"}, "unhighlight": {"params": [{"type": "Shape", "name": "shape", "description": " The shape to be unhighlighted"}], "description": "Unhighlight the specified shape by hiding the highlighting marker", "guessedname": "unhighlight", "guessedtype": "function"}, "highlight": {"params": [{"type": "Shape", "name": "shape", "description": " The shape to be highlighted"}], "description": "Highlight the specified shape by showing the highlighting marker", "guessedname": "highlight", "guessedtype": "function"}, "select": {"params": [{"type": "[Shape] | Shape", "name": "shapes", "description": " The shapes to add to the selection"}], "description": "Add the specified shapes to the current selection", "guessedname": "select", "guessedtype": "function"}}, "file": "shapeselect.js", "guessedtype": "function", "shortname": "ShapeSelect", "description": "Enbable shape selection for the specified model viewer"}}, "version": "0.1.1", "namespaces": ["MOVI.util", "MOVI.model", "MOVI.widget", "MOVI.stencilset"]}