/** * Copyright (c) 2008 * Willi Tscheschner * * Permission is hereby granted, free of charge, to any person obtaining a * copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense, * and/or sell copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER * DEALINGS IN THE SOFTWARE. **/if (!ORYX.Plugins) {    ORYX.Plugins = new Object();}/** * This plugin is responsible for resizing the canvas. * @param {Object} facade The editor plugin facade to register enhancements with. */ORYX.Plugins.CanvasResize = Clazz.extend({    construct: function(facade){		        this.facade = facade;        		var canvasNode = this.facade.getCanvas().getHTMLContainer().parentNode.parentNode.parentNode;				new ORYX.Plugins.CanvasResizeButton( canvasNode, "N", this.resize.bind(this));		new ORYX.Plugins.CanvasResizeButton( canvasNode, "W", this.resize.bind(this));		new ORYX.Plugins.CanvasResizeButton( canvasNode, "E", this.resize.bind(this));		new ORYX.Plugins.CanvasResizeButton( canvasNode, "S", this.resize.bind(this));    },        resize: function( position ){    	    	resizeCanvas = function(position, extentionSize, facade) {        	var canvas 		= facade.getCanvas();    		var b 			= canvas.bounds;    		var scrollNode 	= facade.getCanvas().getHTMLContainer().parentNode.parentNode;    		    		if( position == "E" || position == "W"){    			canvas.setSize({width: b.width() + extentionSize, height: b.height()})    		} else if( position == "S" || position == "N"){    			canvas.setSize({width: b.width(), height: b.height() + extentionSize})    		}    		if( position == "N" || position == "W"){    			    			var move = position == "N" ? {x: 0, y: extentionSize}: {x: extentionSize, y: 0 };    			// Move all children    			canvas.getChildShapes(false, function(shape){ shape.bounds.moveBy(move) })    			// Move all dockers, when the edge has at least one docked shape    			var edges = canvas.getChildEdges().findAll(function(edge){ return edge.getAllDockedShapes().length > 0})    			var dockers = edges.collect(function(edge){ return edge.dockers.findAll(function(docker){ return !docker.getDockedShape() })}).flatten();    			dockers.each(function(docker){ docker.bounds.moveBy(move)})    		} else if( position == "S" ){    			scrollNode.scrollTop += extentionSize;    		} else if( position == "E" ){    			scrollNode.scrollLeft += extentionSize;    		}    		    		canvas.update();    		facade.updateSelection();        }				var commandClass = ORYX.Core.Command.extend({			construct: function(position, extentionSize, facade){				this.position = position;				this.extentionSize = extentionSize;				this.facade = facade;			},						execute: function(){				resizeCanvas(this.position, this.extentionSize, this.facade);			},			rollback: function(){				resizeCanvas(this.position, -this.extentionSize, this.facade);			},			update:function(){			}		});				var extentionSize = ORYX.CONFIG.CANVAS_RESIZE_INTERVAL;		var command = new commandClass(position, extentionSize, this.facade);				this.facade.executeCommands([command]);			    }    });ORYX.Plugins.CanvasResizeButton = Clazz.extend({		construct: function(parentNode, position, callback){		var scrollNode 	= parentNode.firstChild;		var svgRootNode = scrollNode.firstChild.firstChild;		// The button		var button 	= ORYX.Editor.graft("http://www.w3.org/1999/xhtml", parentNode, ['div', { 'class': 'canvas_resize_indicator' + ' ' + position}]); 		// Add the callback		button.addEventListener('click', function(){callback( position )}, true);				// Defines a callback which gives back		// a boolean if the current mouse event 		// is over the particular button area		var offSetWidth = 30;		var isOverOffset = function(event){			//console.log(event)			//if(event.target != svgRootNode){ return false }			//console.log("yes")			if(position == "N"){				return event.layerX > 10 && event.layerX < scrollNode.scrollWidth && event.layerY < offSetWidth;			} else if(position == "W"){				return event.layerX < offSetWidth && event.layerY > 10 && event.layerY < scrollNode.scrollHeight - 10;			} else if(position == "E"){				return event.layerX > scrollNode.scrollWidth - offSetWidth && event.layerY > 10 && event.layerY < scrollNode.scrollHeight - 10;			} else if(position == "S"){				return event.layerX > 10 && event.layerX < scrollNode.scrollWidth - 10 && event.layerY > scrollNode.scrollHeight - offSetWidth;			}						return false;		}				// If the mouse move is over the button area, show the button		svgRootNode.addEventListener(	ORYX.CONFIG.EVENT_MOUSEMOVE, 	function(event){ if( isOverOffset(event) ){button.show()} else {button.hide()}} , false );		// If the mouse is over the button, show them		button.addEventListener(		ORYX.CONFIG.EVENT_MOUSEOVER, 	function(event){button.show()}, true )		// If the mouse is out, hide the button		parentNode.addEventListener(	ORYX.CONFIG.EVENT_MOUSEOUT, 	function(event){ button.hide() } , true );				// Hide the button initialy		button.hide();	}});